{"version":"https://jsonfeed.org/version/1.1","title":"Home","home_page_url":"https://urara-demo.netlify.app","feed_url":"https://urara-demo.netlify.app/feed.json","description":"","icon":"https://urara-demo.netlify.app/assets/any@512.png","favicon":"https://urara-demo.netlify.app/favicon.png","authors":[{"name":"Saikat Karmakar","url":"https://urara-demo.netlify.app","avatar":"/assets/profile.jpeg"}],"language":"en-US","items":[{"id":"Welcome Web3","url":"https://urara-demo.netlify.app/Welcome Web3","title":"Welcome Web3","content_html":"<p><a href=\"https://github.com/Aviksaikat/WalkThroughs/tree/master/nahamcon_EU_22/web3/Welcome_DONE\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">Challenge Code</a></p><ul><li>So we have the challenge file in the <a href=\"https://github.com/Aviksaikat/WalkThroughs/tree/master/nahamcon_EU_22/web3/Welcome_DONE\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">eth_welcome.zip</a> file. As after extracting we have the following files</li></ul><!-- HTML_TAG_START --><pre class=\"shiki material-default\" py=\"true\"><div class=\"language-id\">py</div><div class='code-container'><code><div class='line'>% tree</div><div class='line'>.</div><div class='line'>├── contracts</div><div class='line'>│   └── Welcome.sol</div><div class='line'>├── eth_welcome.zip</div><div class='line'>├── interfaces</div><div class='line'>└── scripts</div><div class='line'>    └── challenge.py</div><div class='line'></div><div class='line'>3 directories, 3 files</div><div class='line'></div></code></div></pre><!-- HTML_TAG_END --><ul><li><p>Authors used <a href=\"https://eth-brownie.readthedocs.io/en/stable/python-package.html\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">brownie</a> framework setting up this CTF challenges. So we can use this dir structure directly for our testing. So we have the target contract <code>Welcome.sol</code> &amp; <code>challenge.py</code> to check what are the requirements to solve this CTF, because there is no flag for these challenges. Instead when we have to use the given RPC url to submit our solution. So let’s get started. </p></li><li><p>So let’s start by reading the <code>challenge.py</code> file. </p></li></ul><!-- HTML_TAG_START --><pre class=\"shiki material-default\" py=\"true\"><div class=\"language-id\">py</div><div class='code-container'><code><div class='line'>from brownie import *</div><div class='line'></div><div class='line'>def deploy(state, deployer, player):</div><div class='line'>    Welcome.deploy(&#123;'from': deployer[0]&#125;)</div><div class='line'></div><div class='line'>def solved():</div><div class='line'>    if Welcome[-1].balance() &gt; 0:</div><div class='line'>        return True, \"Solved!\"</div><div class='line'>    else:</div><div class='line'>        return False, \"Need more coins!\"</div><div class='line'></div><div class='line'>CONFIG = &#123;</div><div class='line'>    # \"RPC\": '',</div><div class='line'>    # \"BLOCK_NUMBER\": '',</div><div class='line'>    # 'FLAGS': '',</div><div class='line'>    'MNEMONIC': 'test test test test test test test test test test test junk',</div><div class='line'>    # 'RUNNABLES': [],</div><div class='line'>    'ALLOWED_RPC_METHODS': []</div><div class='line'>&#125;</div><div class='line'></div></code></div></pre><!-- HTML_TAG_END --><ul><li><p>So we have 2 functions; <code>deploy</code> &amp; <code>solved</code>. By the names you can understand what they do. So let’s skip the deploy one &amp; see the <code>solved()</code>.</p></li><li><p>It’s simple <code>if Welcome[-1].balance() &gt; 0:</code> checks wether the balance of the contract is more than 0 or not. The <code>-1</code> indicates take the latest deployed contract instance. And lastly we have a <code>CONFIG</code> dictionary which has the <code>mnemonic</code> i.e. our private key for the given wallet. We can use this address to solve the challenge.</p></li><li><p>So it’s simple send money to the contract &amp; make it’s balance more than <code>0</code> &amp; solve the challenge. Hmmm how can we do that. Let’s look at the contract now.</p></li><li><p><code>Welcome.sol</code></p></li></ul><!-- HTML_TAG_START --><pre class=\"shiki material-default\" js=\"true\"><div class=\"language-id\">js</div><div class='code-container'><code><div class='line'>pragma solidity ^0.8.10;</div><div class='line'></div><div class='line'>contract Welcome &#123;</div><div class='line'></div><div class='line'>    receive() external payable &#123;</div><div class='line'>        </div><div class='line'>    &#125;</div><div class='line'></div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --><ul><li><p>So the first line is the <code>pragma solidity</code> which defines the compiler version we should be using for this contract. Next, we have the <code>contract</code> keyword with the contract name <code>Welcome</code> &amp; inside this contract there is a odd function/method i.e. called <code>receive()</code> &amp; it has no body. Odd…hmmm… not quite. Actually it’s pretty common in solidity. </p></li><li><p>This <code>receive()</code> fu. is called a <code>Fallback function</code>. Wait. What are those!!??. </p></li><li><p>According to Learn Ethereum [Book] - O’Reilly, <code>A fallback function is an unnamed external function without any input or output parameters. EVM executes the fallback function on a contract if none of the other functions match the intended function calls </code>. </p></li><li><p>In terms of english, a fallback function is fn. which is used to receive tokens (ETH or anything) from other sources (other contract/wallet etc.). It has no body, it doesn’t take any input parameter and it doesn’t return anything. This method is the latest way of receiving money(tokens) from other sources. In older version of solidity this can be done by just specifying the <code>function</code> keyword like this <code>function() external payable {}</code>. </p></li><li><p>The <code>external</code> specifies that the fn. can be called from other contracts or wallets. </p></li><li><p>Lastly the <code>payable</code> keyword. It’s very important as without this keyword this contract can’t receive any payments. It tells the <code>EVM</code> that this function is capable of receiving eth.</p></li></ul><ul><li>Ok let’s make our attack script. We have started our instance. We can run this locally as well because by the time I publish this writeup the site will be pretty much taken down. </li></ul><p><img src=\"/assets/challenge_start.png\" alt=\"/assets/challenge_start.png\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><ul><li>To run the contract in the challenge environment from brownie fist we have to add it to the <code>brownie networks list</code>. To do this we have to use this command. To know more always read the docs.</li></ul><!-- HTML_TAG_START --><pre class=\"shiki material-default\" py=\"true\"><div class=\"language-id\">py</div><div class='code-container'><code><div class='line'>brownie networks add Ethereum 1337 host=&lt;RPC URL&gt; chainid=1</div></code></div></pre><!-- HTML_TAG_END --><ul><li><p>And we’ll get something like this.<img src=\"/assets/networks-add.png\" alt=\"/assets/networks-add.png\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p></li><li><p>Cool let’s start writing our script.</p></li></ul><!-- HTML_TAG_START --><pre class=\"shiki material-default\" py=\"true\"><div class=\"language-id\">py</div><div class='code-container'><code><div class='line'>#!/usr/bin/python3</div><div class='line'>from brownie import *</div><div class='line'></div><div class='line'>def solved(welcome_address):</div><div class='line'>    if Welcome.at(welcome_address).balance() &gt; 0:</div><div class='line'>        return \"Solved!\"</div><div class='line'>    else:</div><div class='line'>        return \"Need more coins!\"</div><div class='line'></div><div class='line'>def main(welcome_address=None):</div><div class='line'>    if welcome_address:</div><div class='line'>        # print(\"Yo\")</div><div class='line'>        CONFIG = &#123;</div><div class='line'>            \"RPC\": \"https://ctf.nahamcon.com/challenge/39/4b1c3f26-f849-4ead-b563-6ddc5f5d477b\",</div><div class='line'>            # \"BLOCK_NUMBER\": '',</div><div class='line'>            # 'FLAGS': '',</div><div class='line'>            \"MNEMONIC\": \"test test test test test test test test test test test junk\",</div><div class='line'>            # 'RUNNABLES': [],</div><div class='line'>            \"ALLOWED_RPC_METHODS\": [],</div><div class='line'>        &#125;</div><div class='line'>        # welcome_address = \"0x0cB8C2Fe5f94B3b9a569Df43a9155AC008c9884b\"</div><div class='line'>        attacker = accounts.from_mnemonic(CONFIG[\"MNEMONIC\"])</div><div class='line'>        tx = attacker.transfer(to=welcome_address, amount=\"0.01 ether\")</div><div class='line'>        tx.wait(1)</div><div class='line'></div><div class='line'>        print(f\"Solved: &#123;solved(welcome_address)&#125;\")</div></code></div></pre><!-- HTML_TAG_END --><ul><li>So we have defined our <code>main</code> fn. There is if part because I’m going to pass the contract address as a command line argument to make it more generic you can just uncomment the <code>welcome_address</code> variable. The <code>else</code> part is to test the contract locally. We’ll get into in later. We have the <code>CONFIG</code> dictionary which has the <code>mnemonic</code> key.</li><li>Next loads the wallet from the mnemonic. <code>accounts.from_mnemonic(CONFIG[&quot;MNEMONIC&quot;])</code>.So we’re pulling the <code>mnemonic</code> from <code>CONFIG</code> dictionary &amp; saving it as the <code>attacker</code> variable.</li></ul><!-- HTML_TAG_START --><pre class=\"shiki material-default\" py=\"true\"><div class=\"language-id\">py</div><div class='code-container'><code><div class='line'>tx = attacker.transfer(to=welcome_address, amount=\"0.1 ether\")</div><div class='line'>tx.wait(1)</div></code></div></pre><!-- HTML_TAG_END --><ul><li><p>Next we’re sending <code>0.1 ETH</code> from our wallet to the target contract &amp; the next line is not necessary but we’re waiting for the transaction.</p></li><li><p>Lastly we’re calling the <code>solved()</code> fn. to get check wether all these code makes any sense or not. </p></li><li><p>Now let’s do the magic. To run we have to use the following command.</p></li></ul><!-- HTML_TAG_START --><pre class=\"shiki material-default\" py=\"true\"><div class=\"language-id\">py</div><div class='code-container'><code><div class='line'>brownie run scripts/attack.py main &lt;address of the contract&gt; --network &lt;network name&gt;</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"/assets/run.png\" alt=\"/assets/run.png\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><ul><li><p>Done! We have solved the challenge!!!</p></li><li><p>Now the bonus part. If we want to test this locally we can do this with just a few tweaks. Let’s see how we can do that. So to do that fist we have to deploy the contract locally. So let’s add the <code>else</code>. </p></li></ul><!-- HTML_TAG_START --><pre class=\"shiki material-default\" py=\"true\"><div class=\"language-id\">py</div><div class='code-container'><code><div class='line'>def deploy_local():</div><div class='line'>    return Welcome.deploy(&#123;\"from\": accounts[0]&#125;)</div><div class='line'>    [...]</div><div class='line'>    else:</div><div class='line'>        welcome = deploy_local()</div><div class='line'>        welcome_address = welcome.address</div><div class='line'>        # print(address)</div><div class='line'></div><div class='line'>        # send ether forcefully</div><div class='line'>        attacker = accounts[1]</div><div class='line'>        tx = attacker.transfer(to=welcome_address, amount=\"0.001 ether\")</div><div class='line'>        tx.wait(1)</div><div class='line'></div><div class='line'>        print(f\"Solved: &#123;solved_locally()&#125;\")</div></code></div></pre><!-- HTML_TAG_END --><ul><li><p>The <code>deploy_local</code> fn. is going to deploy the contract locally &amp; this is the syntax to do that. Notice the <code>{&quot;from&quot;: accounts[0]}</code> which is the defined way of deploying smart contracts in brownie. We’re specifying the account from which the contract is being deployed. <code>accounts</code> is a list provided by brownie that contains 10 test accounts indexed from 0-9. We can use any of them. Then we’re setting the address of the deployed contract to the <code>welcome_address</code> variable &amp; we’re using the 2nd test account as the attacker account. It can be anything other than the fist account otherwise it’s worthless if we’re the admin then everything is pointless. Apart from that everything is same. So the final script looks like this.</p></li><li><p><code>attack.py</code></p></li></ul><!-- HTML_TAG_START --><pre class=\"shiki material-default\" py=\"true\"><div class=\"language-id\">py</div><div class='code-container'><code><div class='line'>#!/usr/bin/python3</div><div class='line'>from brownie import *</div><div class='line'></div><div class='line'>def deploy(state, deployer, player):</div><div class='line'>    Welcome.deploy(&#123;\"from\": deployer[0]&#125;)</div><div class='line'></div><div class='line'></div><div class='line'>def solved(welcome_address):</div><div class='line'>    if Welcome.at(welcome_address).balance() &gt; 0:</div><div class='line'>        return \"Solved!\"</div><div class='line'>    else:</div><div class='line'>        return \"Need more coins!\"</div><div class='line'></div><div class='line'># ------------------------------------------------</div><div class='line'></div><div class='line'>def deploy_local():</div><div class='line'>    return Welcome.deploy(&#123;\"from\": accounts[0]&#125;)</div><div class='line'></div><div class='line'>def solved_locally():</div><div class='line'>    if Welcome[-1].balance() &gt; 0:</div><div class='line'>        return True, \"Solved!\"</div><div class='line'>    else:</div><div class='line'>        return False, \"Need more coins!\"</div><div class='line'></div><div class='line'></div><div class='line'>def main(welcome_address=None):</div><div class='line'>    if welcome_address:</div><div class='line'>        # print(\"Yo\")</div><div class='line'>        CONFIG = &#123;</div><div class='line'>            \"RPC\": \"https://ctf.nahamcon.com/challenge/39/4b1c3f26-f849-4ead-b563-6ddc5f5d477b\",</div><div class='line'>            # \"BLOCK_NUMBER\": '',</div><div class='line'>            # 'FLAGS': '',</div><div class='line'>            \"MNEMONIC\": \"test test test test test test test test test test test junk\",</div><div class='line'>            # 'RUNNABLES': [],</div><div class='line'>            \"ALLOWED_RPC_METHODS\": [],</div><div class='line'>        &#125;</div><div class='line'>        # welcome_address = \"0x0cB8C2Fe5f94B3b9a569Df43a9155AC008c9884b\"</div><div class='line'>        attacker = accounts.from_mnemonic(CONFIG[\"MNEMONIC\"])</div><div class='line'>        tx = attacker.transfer(to=welcome_address, amount=\"0.01 ether\")</div><div class='line'>        tx.wait(1)</div><div class='line'></div><div class='line'>        print(f\"&#123;solved(welcome_address)&#125;\")</div><div class='line'></div><div class='line'>    else:</div><div class='line'>        welcome = deploy_local()</div><div class='line'>        welcome_address = welcome.address</div><div class='line'>        # print(address)</div><div class='line'></div><div class='line'>        # send ether forcefully</div><div class='line'>        attacker = accounts[1]</div><div class='line'>        tx = attacker.transfer(to=welcome_address, amount=\"0.001 ether\")</div><div class='line'>        tx.wait(1)</div><div class='line'></div><div class='line'>        print(f\"Solved: &#123;solved_locally()&#125;\")</div><div class='line'></div></code></div></pre><!-- HTML_TAG_END --><ul><li>We can run this as before but we don’t have to specify anything now.</li></ul><!-- HTML_TAG_START --><pre class=\"shiki material-default\" py=\"true\"><div class=\"language-id\">py</div><div class='code-container'><code><div class='line'>brownie run scripts/attack.py</div></code></div></pre><!-- HTML_TAG_END --><p><img src=\"/assets/solved.png\" alt=\"/assets/solved.png\" class=\"rounded-lg my-2\" loading=\"lazy\" decoding=\"async\"></p><ul><li>And it’s done. I hope you liked this writeup. Thanks for reading. See ya!!</li></ul>","image":"/assets/info.png","date_published":"2022-12-19T00:00:00.000Z","date_modified":"2022-12-19T00:00:00.000Z","tags":["ctf","web3","nahamcon EU ctf 22"],"_indieweb":{"type":"article"}},{"id":"Welcome Web3/elements","url":"https://urara-demo.netlify.app/Welcome Web3/elements","title":"Elements","content_html":"<h2 id=\"headings\"><a href=\"#headings\">Headings</a></h2><h3 id=\"heading\"><a href=\"#heading\">Heading</a></h3><h4 id=\"heading-1\"><a href=\"#heading-1\">Heading</a></h4><h5 id=\"heading-2\"><a href=\"#heading-2\">Heading</a></h5><h6 id=\"heading-3\"><a href=\"#heading-3\">Heading</a></h6><hr><h2 id=\"paragraphs\"><a href=\"#paragraphs\">Paragraphs</a></h2><p><span class=\"spoiler\">spoiler</span></p><p><strong><em>The</em></strong> <em>quick</em> <u>brown</u> <a href=\"https://www.foxnews.com/\" rel=\"nofollow noopener noreferrer external\" target=\"_blank\">fox</a> <code>jumps</code> <del>over</del> the lazy <strong>dog</strong>.</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p><p>建格的何另始養離腳合兒現各談花車是都無處與費別、信善行修覺自！壓總談下市率應次司公母兒用什一線送用標地倒直作任老數年白安足個後引使名隊懷持日落異今特族？</p><p>一士我像衣買了人義，計念？</p><p>期老外並中般灣作各現初知強車我的品式企國立市它北待不型師文人注信方，各成能久，然的孩界，他事應在創灣字母寫麼，會不作散際，學節水……全當名己會天還著行多是生如內他道了家至種樣見景時一……區行水影。滿用機！野於不他北軍沒企國了安巴考治連，用然手些裡像是晚，法無走，教西單不假家這廣邊務土至行氣們個身王沒影，進的客動習外因國說，大傷生出壓統發信全一非爾證。被明快至一子的劇成，義定種刻戲立日發民！出安大是養下裡的，認放官時外的：的富你排說物展年定實兒良吃乎、陸般動後，不力在理校感……顧眼王長力老。</p><p>重多一？生光聯……動說麼了：起形市般我題臉事級。</p><blockquote><p>In solitude, where we are least alone.</p></blockquote><p>私は絶対いよいよ漠然たる相当心に対してはずの他にできるならな。けっして今に養成めも何だか漠然たる仕事たないだけにしからならでをは話安んずるないですて、わざわざには聴いましたなけれた。権力を気がつきなのはどうしても先刻が毫もらしくでう。</p><p>ようやく嘉納さんに供獄とても承諾をやるでしょ習慣その主義それか攻撃にに対してお関係でたあるですと、その今は俺か釣竿頭に喜ぶば、嘉納さんののより考のそれをよくごふりと云ってあなた一団がお融和へ見えようにまあご経験にしずませば、とうとうもっとも誤解になるたでいるないのを思っですた。しかもしかしながら大首へする気もずいぶん美味と移ろたて、この言葉にもいうですてってがたにしてしまえたない。この限り時代のためその学校も私上を吹き込んんかと大森さんをしなませ、人の今日んというご講義ただですば、晩の時で長靴が始めだけの時代に前もっでいて、どうの今日が思えばそのためとあたかも足りんなとしだ事でが、ないますなて少し実職業いでし事だろたませ。</p><p>さて学校か不幸か話に教えですけれども、今中力が起るて得るですためがご講演の今に訊かたです。多年をはどうしても思うでいうんたずでと、まるで何とも繰り返しが周旋はさっそく悪いうので。</p><p><a href=\"#headings\">scrollToTop</a></p><hr><h2 id=\"lists\"><a href=\"#lists\">Lists</a></h2><h3 id=\"definition-list-dl\"><a href=\"#definition-list-dl\">Definition List (dl)</a></h3><dl><dt>Definition List Title</dt><dd>This is a definition list division.</dd></dl><h3 id=\"ordered-list-ol\"><a href=\"#ordered-list-ol\">Ordered List (ol)</a></h3><ol><li>List Item 1</li><li>List Item 2</li><li>List Item 3</li></ol><h3 id=\"unordered-list-ul\"><a href=\"#unordered-list-ul\">Unordered List (ul)</a></h3><ul><li>List Item 1</li><li>List Item 2</li><li>List Item 3</li></ul><h3 id=\"checkbox-list-ul\"><a href=\"#checkbox-list-ul\">Checkbox List (ul)</a></h3><ul class=\"contains-task-list\"><li class=\"task-list-item\"><input type=\"checkbox\" disabled> List Item 1 unchecked</li><li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> List Item 2 checked</li><li class=\"task-list-item\"><input type=\"checkbox\" checked disabled> List Item 3 checked</li></ul><h2 id=\"table\"><a href=\"#table\">Table</a></h2><div class=\"overflow-x-auto mb-4\"><table class=\"table w-full\"><thead><tr><th>Table Header 1</th><th>Table Header 2</th><th>Table Header 3</th></tr></thead><tbody><tr><td>Division 1</td><td>Division 2</td><td>Division 3</td></tr><tr><td>Division 1</td><td>Division 2</td><td>Division 3</td></tr><tr><td>Division 1</td><td>Division 2</td><td>Division 3</td></tr></tbody></table></div><div class=\"overflow-x-auto mb-4\"><table class=\"table w-full\"><thead><tr><th align=\"left\">Table Header 1</th><th align=\"center\">Table Header 2</th><th align=\"right\">Table Header 3</th></tr></thead><tbody><tr><td align=\"left\">Division 1</td><td align=\"center\">Division 2</td><td align=\"right\">Division 3</td></tr><tr><td align=\"left\">Division 1</td><td align=\"center\">Division 2</td><td align=\"right\">Division 3</td></tr><tr><td align=\"left\">Division 1</td><td align=\"center\">Division 2</td><td align=\"right\">Division 3</td></tr></tbody></table></div><p><a href=\"#headings\">scrollToTop</a></p><h2 id=\"footnotes\"><a href=\"#footnotes\">Footnotes</a></h2><p>Here is a footnote reference. <sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p><p>This is a long note. <sup id=\"fnref-longnote\"><a href=\"#fn-longnote\" class=\"footnote-ref\">longnote</a></sup></p><p>This is an inline note. <sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup></p><p><a href=\"#headings\">scrollToTop</a></p><h2 id=\"code\"><a href=\"#code\">Code</a></h2><!-- HTML_TAG_START --><pre class=\"shiki material-default with-title twoslash lsp\" ts=\"true\" title=\"examples/index.ts\"><div class='code-title'>examples/index.ts</div><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line'>for (let <data-lsp lsp='let x: string' >x</data-lsp> in [0]) <data-lsp lsp='var console: Console' >console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void' >log</data-lsp>(<data-lsp lsp='let x: string' >x</data-lsp>)</div></code></div></pre><!-- HTML_TAG_END --><!-- HTML_TAG_START --><pre class=\"shiki material-default twoslash lsp\" ts=\"true\"><div class=\"language-id\">ts</div><div class='code-container'><code><div class='line highlight'>interface IdLabel &#123;</div><div class='line highlight'>  id: number /* some fields */</div><div class='line highlight'>&#125;</div><div class='line highlight'>interface NameLabel &#123;</div><div class='line highlight'>  name<data-lsp lsp='let a: NameLabel' ></data-lsp>: string /* other fields */</div><div class='line highlight'>&#125;</div><div class='line dim'>type NameOrId&lt;T extends number | string&gt; = T extends number ? IdLabel : NameLabel</div><div class='line dim'>// This comment should not be included</div><div class='line dim'>&nbsp;</div><div class='line dim'>// ---cut---</div><div class='line dim'>function createLabel&lt;T extends number | string&gt;(idOrName: T): NameOrId&lt;T&gt; &#123;</div><div class='line dim'>  throw &apos;unimplemented&apos;</div><div class='line dim'>&#125;</div><div class='line dim'>&nbsp;</div><div class='line dim'>let a = createLabel(&apos;typescript&apos;)</div></code></div></pre><!-- HTML_TAG_END --><h2 id=\"misc\"><a href=\"#misc\">Misc</a></h2><sup>Lorem</sup> <sub>ipsum</sub> <cite>dolor sit amet</cite>, <acronym title=\"Consectetur Adipiscing Elit\">consectetur adipiscing elit</acronym>, <abbr title=\"Aliqua\">sed do eiusmod tempor incididunt ut labore et dolore magna aliqua</abbr>. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.<br><br><p>リバースカードオープン、エネミーコントローラー！</p><p>ライフを 1000 払い、コマンド入力、<kbd>←</kbd> <kbd>→</kbd> <kbd>A</kbd> <kbd>B</kbd>！</p><p>このコマンドにより、全てのアニヲタを破壊する！</p><p><a href=\"#headings\">scrollToTop</a></p><h2 id=\"svelte-components\"><a href=\"#svelte-components\">Svelte Components</a></h2><div class=\"relative pb-[56.25%] mb-2\"><iframe src=\"https://www.youtube.com/embed/WysuxO4yR04?\" class=\"absolute w-full h-full\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" loading=\"lazy\" allowfullscreen></iframe></div><div class=\"footnotes\"><hr><ol><li id=\"fn-1\">Here is the footnote.<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a></li><li id=\"fn-longnote\">Here’s one footnote with longer identifier.<a href=\"#fnref-longnote\" class=\"footnote-backref\">↩</a></li><li id=\"fn-2\">You can type footnotes inline, so you don’t have to pick an identifier manually.<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a></li></ol></div>","date_published":"2021-12-12T00:00:00.000Z","date_modified":"2022-12-20T19:16:43.316Z","tags":["Urara","Elements"],"_indieweb":{"type":"article"}},{"id":"Welcome Web3/toc-disabled","url":"https://urara-demo.netlify.app/Welcome Web3/toc-disabled","title":"ToC Disabled","content_html":"<p>This post has disabled table of contents.</p><p>When the <code>toc: false</code> on Front-Matter, toc should not be displayed.</p><h2 id=\"heading\"><a href=\"#heading\">Heading</a></h2><h3 id=\"heading-1\"><a href=\"#heading-1\">Heading</a></h3><h4 id=\"heading-2\"><a href=\"#heading-2\">Heading</a></h4>","summary":"This post has disabled table of contents.","date_published":"2021-12-12T00:00:00.000Z","date_modified":"2022-12-20T19:16:43.316Z","tags":["Front-Matter"],"_indieweb":{"type":"article"}}]}