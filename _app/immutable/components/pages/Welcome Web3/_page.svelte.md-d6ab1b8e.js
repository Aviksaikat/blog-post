import{S as Jn,i as Qn,s as Xn,W as Ft,w as tl,x as nl,y as pl,Z as sp,_ as Mn,f as Fl,t as cl,z as rl,$ as Un,k as t,q as a,a as r,T as W,l as n,m as p,r as o,h as l,c as i,U as S,n as M,b as c,D as s,E as ep}from"../../../chunks/index-9671d79c.js";import{P as lp}from"../../../chunks/post_layout-598cb8fb.js";import{I as Bl}from"../../../chunks/post_card-d26ac490.js";function ap(Fs){let y,E,x,U,d,v,cs,R,Gl,jl,il,_s,Bn=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'><span style="color: #89DDFF">%</span><span style="color: #EEFFFF"> tree</span></div><div class='line'><span style="color: #89DDFF">.</span></div><div class='line'><span style="color: #EEFFFF">├── contracts</span></div><div class='line'><span style="color: #EEFFFF">│   └── Welcome</span><span style="color: #89DDFF">.</span><span style="color: #F07178">sol</span></div><div class='line'><span style="color: #EEFFFF">├── eth_welcome</span><span style="color: #89DDFF">.</span><span style="color: #F07178">zip</span></div><div class='line'><span style="color: #EEFFFF">├── interfaces</span></div><div class='line'><span style="color: #EEFFFF">└── scripts</span></div><div class='line'><span style="color: #EEFFFF">    └── challenge</span><span style="color: #89DDFF">.</span><span style="color: #F07178">py</span></div><div class='line'></div><div class='line'><span style="color: #F78C6C">3</span><span style="color: #EEFFFF"> directories</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> </span><span style="color: #F78C6C">3</span><span style="color: #EEFFFF"> files</span></div><div class='line'></div></code></div></pre>`,As,B,Cs,k,Hl,G,ql,zl,ks,Vl,Kl,bs,Zl,Yl,Jl,gs,Y,Ql,Os,Xl,sa,yl,Is,Gn=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'><span style="color: #89DDFF">from</span><span style="color: #EEFFFF"> brownie </span><span style="color: #89DDFF">import</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">*</span></div><div class='line'></div><div class='line'><span style="color: #C792EA">def</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">deploy</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">state</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> deployer</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> player</span><span style="color: #89DDFF">):</span></div><div class='line'><span style="color: #EEFFFF">    Welcome</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">deploy</span><span style="color: #89DDFF">(&#123;</span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">from</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">:</span><span style="color: #82AAFF"> deployer</span><span style="color: #89DDFF">[</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">]&#125;)</span></div><div class='line'></div><div class='line'><span style="color: #C792EA">def</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">solved</span><span style="color: #89DDFF">():</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">if</span><span style="color: #EEFFFF"> Welcome</span><span style="color: #89DDFF">[-</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">].</span><span style="color: #82AAFF">balance</span><span style="color: #89DDFF">()</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #EEFFFF"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">return</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">True,</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">Solved!</span><span style="color: #89DDFF">"</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">else</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">return</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">False,</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">Need more coins!</span><span style="color: #89DDFF">"</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">CONFIG </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #546E7A"># "RPC": '',</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #546E7A"># "BLOCK_NUMBER": '',</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #546E7A"># 'FLAGS': '',</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">MNEMONIC</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">test test test test test test test test test test test junk</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">,</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #546E7A"># 'RUNNABLES': [],</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">ALLOWED_RPC_METHODS</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">[]</span></div><div class='line'><span style="color: #89DDFF">&#125;</span></div><div class='line'></div></code></div></pre>`,Ls,_,Ns,b,ea,Ws,la,aa,Ss,oa,ta,xs,na,pa,Fa,Ts,f,ca,$s,ra,ia,Ps,ya,da,Ms,Da,Ea,Us,va,ha,fa,Rs,J,ua,Bs,ma,wa,_a,Gs,js,Hs,Aa,dl,qs,jn=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" js="true"><div class="language-id">js</div><div class='code-container'><code><div class='line'><span style="color: #EEFFFF">pragma solidity </span><span style="color: #89DDFF">^</span><span style="color: #F78C6C">0.8</span><span style="color: #89DDFF">.</span><span style="color: #F78C6C">10</span><span style="color: #89DDFF">;</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">contract Welcome </span><span style="color: #89DDFF">&#123;</span></div><div class='line'></div><div class='line'><span style="color: #F07178">    </span><span style="color: #82AAFF">receive</span><span style="color: #F07178">() </span><span style="color: #EEFFFF">external</span><span style="color: #F07178"> </span><span style="color: #EEFFFF">payable</span><span style="color: #F07178"> </span><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #F07178">        </span></div><div class='line'><span style="color: #F07178">    </span><span style="color: #89DDFF">&#125;</span></div><div class='line'></div><div class='line'><span style="color: #89DDFF">&#125;</span></div></code></div></pre>`,zs,D,Vs,u,Ca,Ks,ka,ba,Zs,ga,Oa,Ys,Ia,La,Js,Na,Wa,Sa,Qs,T,xa,Xs,Ta,$a,se,Pa,Ma,Ua,ee,Q,Ra,le,Ba,Ga,ja,ae,$,Ha,oe,qa,za,te,Va,Ka,Za,ne,X,Ya,pe,Ja,Qa,Xa,Fe,P,so,ce,eo,lo,re,ao,oo,Dl,rs,ie,to,El,is,ss,vl,ys,es,no,ye,po,Fo,hl,de,Hn=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'><span style="color: #EEFFFF">brownie networks add Ethereum </span><span style="color: #F78C6C">1337</span><span style="color: #EEFFFF"> host</span><span style="color: #89DDFF">=&lt;</span><span style="color: #EEFFFF">RPC URL</span><span style="color: #89DDFF">&gt;</span><span style="color: #EEFFFF"> chainid</span><span style="color: #89DDFF">=</span><span style="color: #F78C6C">1</span></div></code></div></pre>`,De,j,Ee,ds,co,ls,ro,ve,he,io,fl,fe,qn=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'><span style="color: #546E7A">#!/usr/bin/python3</span></div><div class='line'><span style="color: #89DDFF">from</span><span style="color: #EEFFFF"> brownie </span><span style="color: #89DDFF">import</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">*</span></div><div class='line'></div><div class='line'><span style="color: #C792EA">def</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">solved</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">welcome_address</span><span style="color: #89DDFF">):</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">if</span><span style="color: #EEFFFF"> Welcome</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">at</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">welcome_address</span><span style="color: #89DDFF">).</span><span style="color: #82AAFF">balance</span><span style="color: #89DDFF">()</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #EEFFFF"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">return</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">Solved!</span><span style="color: #89DDFF">"</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">else</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">return</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">Need more coins!</span><span style="color: #89DDFF">"</span></div><div class='line'></div><div class='line'><span style="color: #C792EA">def</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">main</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">welcome_address</span><span style="color: #89DDFF">=None):</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">if</span><span style="color: #EEFFFF"> welcome_address</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #546E7A"># print("Yo")</span></div><div class='line'><span style="color: #EEFFFF">        CONFIG </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #EEFFFF">            </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">RPC</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">https://ctf.nahamcon.com/challenge/39/4b1c3f26-f849-4ead-b563-6ddc5f5d477b</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">,</span></div><div class='line'><span style="color: #EEFFFF">            </span><span style="color: #546E7A"># "BLOCK_NUMBER": '',</span></div><div class='line'><span style="color: #EEFFFF">            </span><span style="color: #546E7A"># 'FLAGS': '',</span></div><div class='line'><span style="color: #EEFFFF">            </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">MNEMONIC</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">test test test test test test test test test test test junk</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">,</span></div><div class='line'><span style="color: #EEFFFF">            </span><span style="color: #546E7A"># 'RUNNABLES': [],</span></div><div class='line'><span style="color: #EEFFFF">            </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">ALLOWED_RPC_METHODS</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">[],</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">&#125;</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #546E7A"># welcome_address = "0x0cB8C2Fe5f94B3b9a569Df43a9155AC008c9884b"</span></div><div class='line'><span style="color: #EEFFFF">        attacker </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> accounts</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">from_mnemonic</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">CONFIG</span><span style="color: #89DDFF">[</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">MNEMONIC</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">])</span></div><div class='line'><span style="color: #EEFFFF">        tx </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> attacker</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">transfer</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">to</span><span style="color: #89DDFF">=</span><span style="color: #82AAFF">welcome_address</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> </span><span style="color: #EEFFFF">amount</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">0.01 ether</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">        tx</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">wait</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">)</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #82AAFF">print</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">f</span><span style="color: #C3E88D">"Solved: </span><span style="color: #82AAFF">&#123;solved</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">welcome_address</span><span style="color: #89DDFF">)</span><span style="color: #82AAFF">&#125;</span><span style="color: #C3E88D">"</span><span style="color: #89DDFF">)</span></div></code></div></pre>`,ue,H,h,yo,me,Do,Eo,we,vo,ho,_e,fo,uo,Ae,mo,wo,Ce,_o,Ao,Co,m,ko,ke,bo,go,be,Oo,Io,ge,Lo,No,Oe,Wo,So,ul,Ie,zn=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'><span style="color: #EEFFFF">tx </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> attacker</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">transfer</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">to</span><span style="color: #89DDFF">=</span><span style="color: #82AAFF">welcome_address</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> </span><span style="color: #EEFFFF">amount</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">0.1 ether</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">tx</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">wait</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">)</span></div></code></div></pre>`,Le,g,Ne,as,xo,We,To,$o,Po,Se,os,Mo,xe,Uo,Ro,Bo,Te,$e,Go,ml,Pe,Vn=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'><span style="color: #EEFFFF">brownie run scripts</span><span style="color: #89DDFF">/</span><span style="color: #EEFFFF">attack</span><span style="color: #89DDFF">.</span><span style="color: #F07178">py</span><span style="color: #EEFFFF"> main </span><span style="color: #89DDFF">&lt;</span><span style="color: #EEFFFF">address of the contract</span><span style="color: #89DDFF">&gt;</span><span style="color: #EEFFFF"> --network </span><span style="color: #89DDFF">&lt;</span><span style="color: #EEFFFF">network name</span><span style="color: #89DDFF">&gt;</span></div></code></div></pre>`,Me,Ds,ts,wl,q,Ue,Re,jo,Ho,Be,ns,qo,Ge,zo,Vo,_l,je,Kn=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'><span style="color: #C792EA">def</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">deploy_local</span><span style="color: #89DDFF">():</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">return</span><span style="color: #EEFFFF"> Welcome</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">deploy</span><span style="color: #89DDFF">(&#123;</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">from</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">:</span><span style="color: #82AAFF"> accounts</span><span style="color: #89DDFF">[</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">]&#125;)</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">[</span><span style="color: #EEFFFF">...</span><span style="color: #89DDFF">]</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">else</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">        welcome </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">deploy_local</span><span style="color: #89DDFF">()</span></div><div class='line'><span style="color: #EEFFFF">        welcome_address </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> welcome</span><span style="color: #89DDFF">.</span><span style="color: #F07178">address</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #546E7A"># print(address)</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #546E7A"># send ether forcefully</span></div><div class='line'><span style="color: #EEFFFF">        attacker </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> accounts</span><span style="color: #89DDFF">[</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">]</span></div><div class='line'><span style="color: #EEFFFF">        tx </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> attacker</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">transfer</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">to</span><span style="color: #89DDFF">=</span><span style="color: #82AAFF">welcome_address</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> </span><span style="color: #EEFFFF">amount</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">0.001 ether</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">        tx</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">wait</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">)</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #82AAFF">print</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">f</span><span style="color: #C3E88D">"Solved: </span><span style="color: #82AAFF">&#123;solved_locally</span><span style="color: #89DDFF">()</span><span style="color: #82AAFF">&#125;</span><span style="color: #C3E88D">"</span><span style="color: #89DDFF">)</span></div></code></div></pre>`,He,z,qe,w,Ko,ze,Zo,Yo,Ve,Jo,Qo,Ke,Xo,st,Ze,et,lt,at,Ye,Je,Qe,ot,Al,Xe,Zn=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'><span style="color: #546E7A">#!/usr/bin/python3</span></div><div class='line'><span style="color: #89DDFF">from</span><span style="color: #EEFFFF"> brownie </span><span style="color: #89DDFF">import</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">*</span></div><div class='line'></div><div class='line'><span style="color: #C792EA">def</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">deploy</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">state</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> deployer</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> player</span><span style="color: #89DDFF">):</span></div><div class='line'><span style="color: #EEFFFF">    Welcome</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">deploy</span><span style="color: #89DDFF">(&#123;</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">from</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">:</span><span style="color: #82AAFF"> deployer</span><span style="color: #89DDFF">[</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">]&#125;)</span></div><div class='line'></div><div class='line'></div><div class='line'><span style="color: #C792EA">def</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">solved</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">welcome_address</span><span style="color: #89DDFF">):</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">if</span><span style="color: #EEFFFF"> Welcome</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">at</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">welcome_address</span><span style="color: #89DDFF">).</span><span style="color: #82AAFF">balance</span><span style="color: #89DDFF">()</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #EEFFFF"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">return</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">Solved!</span><span style="color: #89DDFF">"</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">else</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">return</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">Need more coins!</span><span style="color: #89DDFF">"</span></div><div class='line'></div><div class='line'><span style="color: #546E7A"># ------------------------------------------------</span></div><div class='line'></div><div class='line'><span style="color: #C792EA">def</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">deploy_local</span><span style="color: #89DDFF">():</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">return</span><span style="color: #EEFFFF"> Welcome</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">deploy</span><span style="color: #89DDFF">(&#123;</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">from</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">:</span><span style="color: #82AAFF"> accounts</span><span style="color: #89DDFF">[</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">]&#125;)</span></div><div class='line'></div><div class='line'><span style="color: #C792EA">def</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">solved_locally</span><span style="color: #89DDFF">():</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">if</span><span style="color: #EEFFFF"> Welcome</span><span style="color: #89DDFF">[-</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">].</span><span style="color: #82AAFF">balance</span><span style="color: #89DDFF">()</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #EEFFFF"> </span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">return</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">True,</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">Solved!</span><span style="color: #89DDFF">"</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">else</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">return</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">False,</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">Need more coins!</span><span style="color: #89DDFF">"</span></div><div class='line'></div><div class='line'></div><div class='line'><span style="color: #C792EA">def</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">main</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">welcome_address</span><span style="color: #89DDFF">=None):</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">if</span><span style="color: #EEFFFF"> welcome_address</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #546E7A"># print("Yo")</span></div><div class='line'><span style="color: #EEFFFF">        CONFIG </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #EEFFFF">            </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">RPC</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">https://ctf.nahamcon.com/challenge/39/4b1c3f26-f849-4ead-b563-6ddc5f5d477b</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">,</span></div><div class='line'><span style="color: #EEFFFF">            </span><span style="color: #546E7A"># "BLOCK_NUMBER": '',</span></div><div class='line'><span style="color: #EEFFFF">            </span><span style="color: #546E7A"># 'FLAGS': '',</span></div><div class='line'><span style="color: #EEFFFF">            </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">MNEMONIC</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">test test test test test test test test test test test junk</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">,</span></div><div class='line'><span style="color: #EEFFFF">            </span><span style="color: #546E7A"># 'RUNNABLES': [],</span></div><div class='line'><span style="color: #EEFFFF">            </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">ALLOWED_RPC_METHODS</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">:</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">[],</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">&#125;</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #546E7A"># welcome_address = "0x0cB8C2Fe5f94B3b9a569Df43a9155AC008c9884b"</span></div><div class='line'><span style="color: #EEFFFF">        attacker </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> accounts</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">from_mnemonic</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">CONFIG</span><span style="color: #89DDFF">[</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">MNEMONIC</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">])</span></div><div class='line'><span style="color: #EEFFFF">        tx </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> attacker</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">transfer</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">to</span><span style="color: #89DDFF">=</span><span style="color: #82AAFF">welcome_address</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> </span><span style="color: #EEFFFF">amount</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">0.01 ether</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">        tx</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">wait</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">)</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #82AAFF">print</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">f</span><span style="color: #C3E88D">"</span><span style="color: #82AAFF">&#123;solved</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">welcome_address</span><span style="color: #89DDFF">)</span><span style="color: #82AAFF">&#125;</span><span style="color: #C3E88D">"</span><span style="color: #89DDFF">)</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">else</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">        welcome </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">deploy_local</span><span style="color: #89DDFF">()</span></div><div class='line'><span style="color: #EEFFFF">        welcome_address </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> welcome</span><span style="color: #89DDFF">.</span><span style="color: #F07178">address</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #546E7A"># print(address)</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #546E7A"># send ether forcefully</span></div><div class='line'><span style="color: #EEFFFF">        attacker </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> accounts</span><span style="color: #89DDFF">[</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">]</span></div><div class='line'><span style="color: #EEFFFF">        tx </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> attacker</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">transfer</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">to</span><span style="color: #89DDFF">=</span><span style="color: #82AAFF">welcome_address</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> </span><span style="color: #EEFFFF">amount</span><span style="color: #89DDFF">=</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">0.001 ether</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">        tx</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">wait</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">)</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #82AAFF">print</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">f</span><span style="color: #C3E88D">"Solved: </span><span style="color: #82AAFF">&#123;solved_locally</span><span style="color: #89DDFF">()</span><span style="color: #82AAFF">&#125;</span><span style="color: #C3E88D">"</span><span style="color: #89DDFF">)</span></div><div class='line'></div></code></div></pre>`,sl,Es,el,tt,Cl,ll,Yn=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'><span style="color: #EEFFFF">brownie run scripts</span><span style="color: #89DDFF">/</span><span style="color: #EEFFFF">attack</span><span style="color: #89DDFF">.</span><span style="color: #F07178">py</span></div></code></div></pre>`,al,vs,ps,kl,hs,ol,nt,bl;return ss=new Bl({props:{src:"/assets/challenge_start.png"}}),ls=new Bl({props:{src:"/assets/networks-add.png"}}),ts=new Bl({props:{src:"/assets/run.png"}}),ps=new Bl({props:{src:"/assets/solved.png"}}),{c(){y=t("p"),E=t("a"),x=a("Challenge Code"),U=r(),d=t("ul"),v=t("li"),cs=a("So we have the challenge file in the "),R=t("a"),Gl=a("eth_welcome.zip"),jl=a(" file. As after extracting we have the following files"),il=r(),_s=new W(!1),As=r(),B=t("ul"),Cs=t("li"),k=t("p"),Hl=a("Authors used "),G=t("a"),ql=a("brownie"),zl=a(" framework setting up this CTF challenges. So we can use this dir structure directly for our testing. So we have the target contract "),ks=t("code"),Vl=a("Welcome.sol"),Kl=a(" & "),bs=t("code"),Zl=a("challenge.py"),Yl=a(" to check what are the requirements to solve this CTF, because there is no flag for these challenges. Instead when we have to use the given RPC url to submit our solution. So let’s get started."),Jl=r(),gs=t("li"),Y=t("p"),Ql=a("So let’s start by reading the "),Os=t("code"),Xl=a("challenge.py"),sa=a(" file."),yl=r(),Is=new W(!1),Ls=r(),_=t("ul"),Ns=t("li"),b=t("p"),ea=a("So we have 2 functions; "),Ws=t("code"),la=a("deploy"),aa=a(" & "),Ss=t("code"),oa=a("solved"),ta=a(". By the names you can understand what they do. So let’s skip the deploy one & see the "),xs=t("code"),na=a("solved()"),pa=a("."),Fa=r(),Ts=t("li"),f=t("p"),ca=a("It’s simple "),$s=t("code"),ra=a("if Welcome[-1].balance() > 0:"),ia=a(" checks wether the balance of the contract is more than 0 or not. The "),Ps=t("code"),ya=a("-1"),da=a(" indicates take the latest deployed contract instance. And lastly we have a "),Ms=t("code"),Da=a("CONFIG"),Ea=a(" dictionary which has the "),Us=t("code"),va=a("mnemonic"),ha=a(" i.e. our private key for the given wallet. We can use this address to solve the challenge."),fa=r(),Rs=t("li"),J=t("p"),ua=a("So it’s simple send money to the contract & make it’s balance more than "),Bs=t("code"),ma=a("0"),wa=a(" & solve the challenge. Hmmm how can we do that. Let’s look at the contract now."),_a=r(),Gs=t("li"),js=t("p"),Hs=t("code"),Aa=a("Welcome.sol"),dl=r(),qs=new W(!1),zs=r(),D=t("ul"),Vs=t("li"),u=t("p"),Ca=a("So the first line is the "),Ks=t("code"),ka=a("pragma solidity"),ba=a(" which defines the compiler version we should be using for this contract. Next, we have the "),Zs=t("code"),ga=a("contract"),Oa=a(" keyword with the contract name "),Ys=t("code"),Ia=a("Welcome"),La=a(" & inside this contract there is a odd function/method i.e. called "),Js=t("code"),Na=a("receive()"),Wa=a(" & it has no body. Odd…hmmm… not quite. Actually it’s pretty common in solidity."),Sa=r(),Qs=t("li"),T=t("p"),xa=a("This "),Xs=t("code"),Ta=a("receive()"),$a=a(" fu. is called a "),se=t("code"),Pa=a("Fallback function"),Ma=a(". Wait. What are those!!??."),Ua=r(),ee=t("li"),Q=t("p"),Ra=a("According to Learn Ethereum [Book] - O’Reilly, "),le=t("code"),Ba=a("A fallback function is an unnamed external function without any input or output parameters. EVM executes the fallback function on a contract if none of the other functions match the intended function calls "),Ga=a("."),ja=r(),ae=t("li"),$=t("p"),Ha=a("In terms of english, a fallback function is fn. which is used to receive tokens (ETH or anything) from other sources (other contract/wallet etc.). It has no body, it doesn’t take any input parameter and it doesn’t return anything. This method is the latest way of receiving money(tokens) from other sources. In older version of solidity this can be done by just specifying the "),oe=t("code"),qa=a("function"),za=a(" keyword like this "),te=t("code"),Va=a("function() external payable {}"),Ka=a("."),Za=r(),ne=t("li"),X=t("p"),Ya=a("The "),pe=t("code"),Ja=a("external"),Qa=a(" specifies that the fn. can be called from other contracts or wallets."),Xa=r(),Fe=t("li"),P=t("p"),so=a("Lastly the "),ce=t("code"),eo=a("payable"),lo=a(" keyword. It’s very important as without this keyword this contract can’t receive any payments. It tells the "),re=t("code"),ao=a("EVM"),oo=a(" that this function is capable of receiving eth."),Dl=r(),rs=t("ul"),ie=t("li"),to=a("Ok let’s make our attack script. We have started our instance. We can run this locally as well because by the time I publish this writeup the site will be pretty much taken down."),El=r(),is=t("p"),tl(ss.$$.fragment),vl=r(),ys=t("ul"),es=t("li"),no=a("To run the contract in the challenge environment from brownie fist we have to add it to the "),ye=t("code"),po=a("brownie networks list"),Fo=a(". To do this we have to use this command. To know more always read the docs."),hl=r(),de=new W(!1),De=r(),j=t("ul"),Ee=t("li"),ds=t("p"),co=a(`And we’ll get something like this.
`),tl(ls.$$.fragment),ro=r(),ve=t("li"),he=t("p"),io=a("Cool let’s start writing our script."),fl=r(),fe=new W(!1),ue=r(),H=t("ul"),h=t("li"),yo=a("So we have defined our "),me=t("code"),Do=a("main"),Eo=a(" fn. There is if part because I’m going to pass the contract address as a command line argument to make it more generic you can just uncomment the "),we=t("code"),vo=a("welcome_address"),ho=a(" variable. The "),_e=t("code"),fo=a("else"),uo=a(" part is to test the contract locally. We’ll get into in later. We have the "),Ae=t("code"),mo=a("CONFIG"),wo=a(" dictionary which has the "),Ce=t("code"),_o=a("mnemonic"),Ao=a(" key."),Co=r(),m=t("li"),ko=a("Next loads the wallet from the mnemonic. "),ke=t("code"),bo=a('accounts.from_mnemonic(CONFIG["MNEMONIC"])'),go=a(".So we’re pulling the "),be=t("code"),Oo=a("mnemonic"),Io=a(" from "),ge=t("code"),Lo=a("CONFIG"),No=a(" dictionary & saving it as the "),Oe=t("code"),Wo=a("attacker"),So=a(" variable."),ul=r(),Ie=new W(!1),Le=r(),g=t("ul"),Ne=t("li"),as=t("p"),xo=a("Next we’re sending "),We=t("code"),To=a("0.1 ETH"),$o=a(" from our wallet to the target contract & the next line is not necessary but we’re waiting for the transaction."),Po=r(),Se=t("li"),os=t("p"),Mo=a("Lastly we’re calling the "),xe=t("code"),Uo=a("solved()"),Ro=a(" fn. to get check wether all these code makes any sense or not."),Bo=r(),Te=t("li"),$e=t("p"),Go=a("Now let’s do the magic. To run we have to use the following command."),ml=r(),Pe=new W(!1),Me=r(),Ds=t("p"),tl(ts.$$.fragment),wl=r(),q=t("ul"),Ue=t("li"),Re=t("p"),jo=a("Done! We have solved the challenge!!!"),Ho=r(),Be=t("li"),ns=t("p"),qo=a("Now the bonus part. If we want to test this locally we can do this with just a few tweaks. Let’s see how we can do that. So to do that fist we have to deploy the contract locally. So let’s add the "),Ge=t("code"),zo=a("else"),Vo=a("."),_l=r(),je=new W(!1),He=r(),z=t("ul"),qe=t("li"),w=t("p"),Ko=a("The "),ze=t("code"),Zo=a("deploy_local"),Yo=a(" fn. is going to deploy the contract locally & this is the syntax to do that. Notice the "),Ve=t("code"),Jo=a('{"from": accounts[0]}'),Qo=a(" which is the defined way of deploying smart contracts in brownie. We’re specifying the account from which the contract is being deployed. "),Ke=t("code"),Xo=a("accounts"),st=a(" is a list provided by brownie that contains 10 test accounts indexed from 0-9. We can use any of them. Then we’re setting the address of the deployed contract to the "),Ze=t("code"),et=a("welcome_address"),lt=a(" variable & we’re using the 2nd test account as the attacker account. It can be anything other than the fist account otherwise it’s worthless if we’re the admin then everything is pointless. Apart from that everything is same. So the final script looks like this."),at=r(),Ye=t("li"),Je=t("p"),Qe=t("code"),ot=a("attack.py"),Al=r(),Xe=new W(!1),sl=r(),Es=t("ul"),el=t("li"),tt=a("We can run this as before but we don’t have to specify anything now."),Cl=r(),ll=new W(!1),al=r(),vs=t("p"),tl(ps.$$.fragment),kl=r(),hs=t("ul"),ol=t("li"),nt=a("And it’s done. I hope you liked this writeup. Thanks for reading. See ya!!"),this.h()},l(e){y=n(e,"P",{});var F=p(y);E=n(F,"A",{href:!0,rel:!0,target:!0});var ct=p(E);x=o(ct,"Challenge Code"),ct.forEach(l),F.forEach(l),U=i(e),d=n(e,"UL",{});var rt=p(d);v=n(rt,"LI",{});var gl=p(v);cs=o(gl,"So we have the challenge file in the "),R=n(gl,"A",{href:!0,rel:!0,target:!0});var it=p(R);Gl=o(it,"eth_welcome.zip"),it.forEach(l),jl=o(gl," file. As after extracting we have the following files"),gl.forEach(l),rt.forEach(l),il=i(e),_s=S(e,!1),As=i(e),B=n(e,"UL",{});var Ol=p(B);Cs=n(Ol,"LI",{});var yt=p(Cs);k=n(yt,"P",{});var V=p(k);Hl=o(V,"Authors used "),G=n(V,"A",{href:!0,rel:!0,target:!0});var dt=p(G);ql=o(dt,"brownie"),dt.forEach(l),zl=o(V," framework setting up this CTF challenges. So we can use this dir structure directly for our testing. So we have the target contract "),ks=n(V,"CODE",{});var Dt=p(ks);Vl=o(Dt,"Welcome.sol"),Dt.forEach(l),Kl=o(V," & "),bs=n(V,"CODE",{});var Et=p(bs);Zl=o(Et,"challenge.py"),Et.forEach(l),Yl=o(V," to check what are the requirements to solve this CTF, because there is no flag for these challenges. Instead when we have to use the given RPC url to submit our solution. So let’s get started."),V.forEach(l),yt.forEach(l),Jl=i(Ol),gs=n(Ol,"LI",{});var vt=p(gs);Y=n(vt,"P",{});var Il=p(Y);Ql=o(Il,"So let’s start by reading the "),Os=n(Il,"CODE",{});var ht=p(Os);Xl=o(ht,"challenge.py"),ht.forEach(l),sa=o(Il," file."),Il.forEach(l),vt.forEach(l),Ol.forEach(l),yl=i(e),Is=S(e,!1),Ls=i(e),_=n(e,"UL",{});var K=p(_);Ns=n(K,"LI",{});var ft=p(Ns);b=n(ft,"P",{});var Z=p(b);ea=o(Z,"So we have 2 functions; "),Ws=n(Z,"CODE",{});var ut=p(Ws);la=o(ut,"deploy"),ut.forEach(l),aa=o(Z," & "),Ss=n(Z,"CODE",{});var mt=p(Ss);oa=o(mt,"solved"),mt.forEach(l),ta=o(Z,". By the names you can understand what they do. So let’s skip the deploy one & see the "),xs=n(Z,"CODE",{});var wt=p(xs);na=o(wt,"solved()"),wt.forEach(l),pa=o(Z,"."),Z.forEach(l),ft.forEach(l),Fa=i(K),Ts=n(K,"LI",{});var _t=p(Ts);f=n(_t,"P",{});var O=p(f);ca=o(O,"It’s simple "),$s=n(O,"CODE",{});var At=p($s);ra=o(At,"if Welcome[-1].balance() > 0:"),At.forEach(l),ia=o(O," checks wether the balance of the contract is more than 0 or not. The "),Ps=n(O,"CODE",{});var Ct=p(Ps);ya=o(Ct,"-1"),Ct.forEach(l),da=o(O," indicates take the latest deployed contract instance. And lastly we have a "),Ms=n(O,"CODE",{});var kt=p(Ms);Da=o(kt,"CONFIG"),kt.forEach(l),Ea=o(O," dictionary which has the "),Us=n(O,"CODE",{});var bt=p(Us);va=o(bt,"mnemonic"),bt.forEach(l),ha=o(O," i.e. our private key for the given wallet. We can use this address to solve the challenge."),O.forEach(l),_t.forEach(l),fa=i(K),Rs=n(K,"LI",{});var gt=p(Rs);J=n(gt,"P",{});var Ll=p(J);ua=o(Ll,"So it’s simple send money to the contract & make it’s balance more than "),Bs=n(Ll,"CODE",{});var Ot=p(Bs);ma=o(Ot,"0"),Ot.forEach(l),wa=o(Ll," & solve the challenge. Hmmm how can we do that. Let’s look at the contract now."),Ll.forEach(l),gt.forEach(l),_a=i(K),Gs=n(K,"LI",{});var It=p(Gs);js=n(It,"P",{});var Lt=p(js);Hs=n(Lt,"CODE",{});var Nt=p(Hs);Aa=o(Nt,"Welcome.sol"),Nt.forEach(l),Lt.forEach(l),It.forEach(l),K.forEach(l),dl=i(e),qs=S(e,!1),zs=i(e),D=n(e,"UL",{});var A=p(D);Vs=n(A,"LI",{});var Wt=p(Vs);u=n(Wt,"P",{});var I=p(u);Ca=o(I,"So the first line is the "),Ks=n(I,"CODE",{});var St=p(Ks);ka=o(St,"pragma solidity"),St.forEach(l),ba=o(I," which defines the compiler version we should be using for this contract. Next, we have the "),Zs=n(I,"CODE",{});var xt=p(Zs);ga=o(xt,"contract"),xt.forEach(l),Oa=o(I," keyword with the contract name "),Ys=n(I,"CODE",{});var Tt=p(Ys);Ia=o(Tt,"Welcome"),Tt.forEach(l),La=o(I," & inside this contract there is a odd function/method i.e. called "),Js=n(I,"CODE",{});var $t=p(Js);Na=o($t,"receive()"),$t.forEach(l),Wa=o(I," & it has no body. Odd…hmmm… not quite. Actually it’s pretty common in solidity."),I.forEach(l),Wt.forEach(l),Sa=i(A),Qs=n(A,"LI",{});var Pt=p(Qs);T=n(Pt,"P",{});var fs=p(T);xa=o(fs,"This "),Xs=n(fs,"CODE",{});var Mt=p(Xs);Ta=o(Mt,"receive()"),Mt.forEach(l),$a=o(fs," fu. is called a "),se=n(fs,"CODE",{});var Ut=p(se);Pa=o(Ut,"Fallback function"),Ut.forEach(l),Ma=o(fs,". Wait. What are those!!??."),fs.forEach(l),Pt.forEach(l),Ua=i(A),ee=n(A,"LI",{});var Rt=p(ee);Q=n(Rt,"P",{});var Nl=p(Q);Ra=o(Nl,"According to Learn Ethereum [Book] - O’Reilly, "),le=n(Nl,"CODE",{});var Bt=p(le);Ba=o(Bt,"A fallback function is an unnamed external function without any input or output parameters. EVM executes the fallback function on a contract if none of the other functions match the intended function calls "),Bt.forEach(l),Ga=o(Nl,"."),Nl.forEach(l),Rt.forEach(l),ja=i(A),ae=n(A,"LI",{});var Gt=p(ae);$=n(Gt,"P",{});var us=p($);Ha=o(us,"In terms of english, a fallback function is fn. which is used to receive tokens (ETH or anything) from other sources (other contract/wallet etc.). It has no body, it doesn’t take any input parameter and it doesn’t return anything. This method is the latest way of receiving money(tokens) from other sources. In older version of solidity this can be done by just specifying the "),oe=n(us,"CODE",{});var jt=p(oe);qa=o(jt,"function"),jt.forEach(l),za=o(us," keyword like this "),te=n(us,"CODE",{});var Ht=p(te);Va=o(Ht,"function() external payable {}"),Ht.forEach(l),Ka=o(us,"."),us.forEach(l),Gt.forEach(l),Za=i(A),ne=n(A,"LI",{});var qt=p(ne);X=n(qt,"P",{});var Wl=p(X);Ya=o(Wl,"The "),pe=n(Wl,"CODE",{});var zt=p(pe);Ja=o(zt,"external"),zt.forEach(l),Qa=o(Wl," specifies that the fn. can be called from other contracts or wallets."),Wl.forEach(l),qt.forEach(l),Xa=i(A),Fe=n(A,"LI",{});var Vt=p(Fe);P=n(Vt,"P",{});var ms=p(P);so=o(ms,"Lastly the "),ce=n(ms,"CODE",{});var Kt=p(ce);eo=o(Kt,"payable"),Kt.forEach(l),lo=o(ms," keyword. It’s very important as without this keyword this contract can’t receive any payments. It tells the "),re=n(ms,"CODE",{});var Zt=p(re);ao=o(Zt,"EVM"),Zt.forEach(l),oo=o(ms," that this function is capable of receiving eth."),ms.forEach(l),Vt.forEach(l),A.forEach(l),Dl=i(e),rs=n(e,"UL",{});var Yt=p(rs);ie=n(Yt,"LI",{});var Jt=p(ie);to=o(Jt,"Ok let’s make our attack script. We have started our instance. We can run this locally as well because by the time I publish this writeup the site will be pretty much taken down."),Jt.forEach(l),Yt.forEach(l),El=i(e),is=n(e,"P",{});var Qt=p(is);nl(ss.$$.fragment,Qt),Qt.forEach(l),vl=i(e),ys=n(e,"UL",{});var Xt=p(ys);es=n(Xt,"LI",{});var Sl=p(es);no=o(Sl,"To run the contract in the challenge environment from brownie fist we have to add it to the "),ye=n(Sl,"CODE",{});var sn=p(ye);po=o(sn,"brownie networks list"),sn.forEach(l),Fo=o(Sl,". To do this we have to use this command. To know more always read the docs."),Sl.forEach(l),Xt.forEach(l),hl=i(e),de=S(e,!1),De=i(e),j=n(e,"UL",{});var xl=p(j);Ee=n(xl,"LI",{});var en=p(Ee);ds=n(en,"P",{});var pt=p(ds);co=o(pt,`And we’ll get something like this.
`),nl(ls.$$.fragment,pt),pt.forEach(l),en.forEach(l),ro=i(xl),ve=n(xl,"LI",{});var ln=p(ve);he=n(ln,"P",{});var an=p(he);io=o(an,"Cool let’s start writing our script."),an.forEach(l),ln.forEach(l),xl.forEach(l),fl=i(e),fe=S(e,!1),ue=i(e),H=n(e,"UL",{});var Tl=p(H);h=n(Tl,"LI",{});var C=p(h);yo=o(C,"So we have defined our "),me=n(C,"CODE",{});var on=p(me);Do=o(on,"main"),on.forEach(l),Eo=o(C," fn. There is if part because I’m going to pass the contract address as a command line argument to make it more generic you can just uncomment the "),we=n(C,"CODE",{});var tn=p(we);vo=o(tn,"welcome_address"),tn.forEach(l),ho=o(C," variable. The "),_e=n(C,"CODE",{});var nn=p(_e);fo=o(nn,"else"),nn.forEach(l),uo=o(C," part is to test the contract locally. We’ll get into in later. We have the "),Ae=n(C,"CODE",{});var pn=p(Ae);mo=o(pn,"CONFIG"),pn.forEach(l),wo=o(C," dictionary which has the "),Ce=n(C,"CODE",{});var Fn=p(Ce);_o=o(Fn,"mnemonic"),Fn.forEach(l),Ao=o(C," key."),C.forEach(l),Co=i(Tl),m=n(Tl,"LI",{});var L=p(m);ko=o(L,"Next loads the wallet from the mnemonic. "),ke=n(L,"CODE",{});var cn=p(ke);bo=o(cn,'accounts.from_mnemonic(CONFIG["MNEMONIC"])'),cn.forEach(l),go=o(L,".So we’re pulling the "),be=n(L,"CODE",{});var rn=p(be);Oo=o(rn,"mnemonic"),rn.forEach(l),Io=o(L," from "),ge=n(L,"CODE",{});var yn=p(ge);Lo=o(yn,"CONFIG"),yn.forEach(l),No=o(L," dictionary & saving it as the "),Oe=n(L,"CODE",{});var dn=p(Oe);Wo=o(dn,"attacker"),dn.forEach(l),So=o(L," variable."),L.forEach(l),Tl.forEach(l),ul=i(e),Ie=S(e,!1),Le=i(e),g=n(e,"UL",{});var ws=p(g);Ne=n(ws,"LI",{});var Dn=p(Ne);as=n(Dn,"P",{});var $l=p(as);xo=o($l,"Next we’re sending "),We=n($l,"CODE",{});var En=p(We);To=o(En,"0.1 ETH"),En.forEach(l),$o=o($l," from our wallet to the target contract & the next line is not necessary but we’re waiting for the transaction."),$l.forEach(l),Dn.forEach(l),Po=i(ws),Se=n(ws,"LI",{});var vn=p(Se);os=n(vn,"P",{});var Pl=p(os);Mo=o(Pl,"Lastly we’re calling the "),xe=n(Pl,"CODE",{});var hn=p(xe);Uo=o(hn,"solved()"),hn.forEach(l),Ro=o(Pl," fn. to get check wether all these code makes any sense or not."),Pl.forEach(l),vn.forEach(l),Bo=i(ws),Te=n(ws,"LI",{});var fn=p(Te);$e=n(fn,"P",{});var un=p($e);Go=o(un,"Now let’s do the magic. To run we have to use the following command."),un.forEach(l),fn.forEach(l),ws.forEach(l),ml=i(e),Pe=S(e,!1),Me=i(e),Ds=n(e,"P",{});var mn=p(Ds);nl(ts.$$.fragment,mn),mn.forEach(l),wl=i(e),q=n(e,"UL",{});var Ml=p(q);Ue=n(Ml,"LI",{});var wn=p(Ue);Re=n(wn,"P",{});var _n=p(Re);jo=o(_n,"Done! We have solved the challenge!!!"),_n.forEach(l),wn.forEach(l),Ho=i(Ml),Be=n(Ml,"LI",{});var An=p(Be);ns=n(An,"P",{});var Ul=p(ns);qo=o(Ul,"Now the bonus part. If we want to test this locally we can do this with just a few tweaks. Let’s see how we can do that. So to do that fist we have to deploy the contract locally. So let’s add the "),Ge=n(Ul,"CODE",{});var Cn=p(Ge);zo=o(Cn,"else"),Cn.forEach(l),Vo=o(Ul,"."),Ul.forEach(l),An.forEach(l),Ml.forEach(l),_l=i(e),je=S(e,!1),He=i(e),z=n(e,"UL",{});var Rl=p(z);qe=n(Rl,"LI",{});var kn=p(qe);w=n(kn,"P",{});var N=p(w);Ko=o(N,"The "),ze=n(N,"CODE",{});var bn=p(ze);Zo=o(bn,"deploy_local"),bn.forEach(l),Yo=o(N," fn. is going to deploy the contract locally & this is the syntax to do that. Notice the "),Ve=n(N,"CODE",{});var gn=p(Ve);Jo=o(gn,'{"from": accounts[0]}'),gn.forEach(l),Qo=o(N," which is the defined way of deploying smart contracts in brownie. We’re specifying the account from which the contract is being deployed. "),Ke=n(N,"CODE",{});var On=p(Ke);Xo=o(On,"accounts"),On.forEach(l),st=o(N," is a list provided by brownie that contains 10 test accounts indexed from 0-9. We can use any of them. Then we’re setting the address of the deployed contract to the "),Ze=n(N,"CODE",{});var In=p(Ze);et=o(In,"welcome_address"),In.forEach(l),lt=o(N," variable & we’re using the 2nd test account as the attacker account. It can be anything other than the fist account otherwise it’s worthless if we’re the admin then everything is pointless. Apart from that everything is same. So the final script looks like this."),N.forEach(l),kn.forEach(l),at=i(Rl),Ye=n(Rl,"LI",{});var Ln=p(Ye);Je=n(Ln,"P",{});var Nn=p(Je);Qe=n(Nn,"CODE",{});var Wn=p(Qe);ot=o(Wn,"attack.py"),Wn.forEach(l),Nn.forEach(l),Ln.forEach(l),Rl.forEach(l),Al=i(e),Xe=S(e,!1),sl=i(e),Es=n(e,"UL",{});var Sn=p(Es);el=n(Sn,"LI",{});var xn=p(el);tt=o(xn,"We can run this as before but we don’t have to specify anything now."),xn.forEach(l),Sn.forEach(l),Cl=i(e),ll=S(e,!1),al=i(e),vs=n(e,"P",{});var Tn=p(vs);nl(ps.$$.fragment,Tn),Tn.forEach(l),kl=i(e),hs=n(e,"UL",{});var $n=p(hs);ol=n($n,"LI",{});var Pn=p(ol);nt=o(Pn,"And it’s done. I hope you liked this writeup. Thanks for reading. See ya!!"),Pn.forEach(l),$n.forEach(l),this.h()},h(){M(E,"href","https://github.com/Aviksaikat/WalkThroughs/tree/master/nahamcon_EU_22/web3/Welcome_DONE"),M(E,"rel","nofollow noopener noreferrer external"),M(E,"target","_blank"),M(R,"href","https://github.com/Aviksaikat/WalkThroughs/tree/master/nahamcon_EU_22/web3/Welcome_DONE"),M(R,"rel","nofollow noopener noreferrer external"),M(R,"target","_blank"),_s.a=As,M(G,"href","https://eth-brownie.readthedocs.io/en/stable/python-package.html"),M(G,"rel","nofollow noopener noreferrer external"),M(G,"target","_blank"),Is.a=Ls,qs.a=zs,de.a=De,fe.a=ue,Ie.a=Le,Pe.a=Me,je.a=He,Xe.a=sl,ll.a=al},m(e,F){c(e,y,F),s(y,E),s(E,x),c(e,U,F),c(e,d,F),s(d,v),s(v,cs),s(v,R),s(R,Gl),s(v,jl),c(e,il,F),_s.m(Bn,e,F),c(e,As,F),c(e,B,F),s(B,Cs),s(Cs,k),s(k,Hl),s(k,G),s(G,ql),s(k,zl),s(k,ks),s(ks,Vl),s(k,Kl),s(k,bs),s(bs,Zl),s(k,Yl),s(B,Jl),s(B,gs),s(gs,Y),s(Y,Ql),s(Y,Os),s(Os,Xl),s(Y,sa),c(e,yl,F),Is.m(Gn,e,F),c(e,Ls,F),c(e,_,F),s(_,Ns),s(Ns,b),s(b,ea),s(b,Ws),s(Ws,la),s(b,aa),s(b,Ss),s(Ss,oa),s(b,ta),s(b,xs),s(xs,na),s(b,pa),s(_,Fa),s(_,Ts),s(Ts,f),s(f,ca),s(f,$s),s($s,ra),s(f,ia),s(f,Ps),s(Ps,ya),s(f,da),s(f,Ms),s(Ms,Da),s(f,Ea),s(f,Us),s(Us,va),s(f,ha),s(_,fa),s(_,Rs),s(Rs,J),s(J,ua),s(J,Bs),s(Bs,ma),s(J,wa),s(_,_a),s(_,Gs),s(Gs,js),s(js,Hs),s(Hs,Aa),c(e,dl,F),qs.m(jn,e,F),c(e,zs,F),c(e,D,F),s(D,Vs),s(Vs,u),s(u,Ca),s(u,Ks),s(Ks,ka),s(u,ba),s(u,Zs),s(Zs,ga),s(u,Oa),s(u,Ys),s(Ys,Ia),s(u,La),s(u,Js),s(Js,Na),s(u,Wa),s(D,Sa),s(D,Qs),s(Qs,T),s(T,xa),s(T,Xs),s(Xs,Ta),s(T,$a),s(T,se),s(se,Pa),s(T,Ma),s(D,Ua),s(D,ee),s(ee,Q),s(Q,Ra),s(Q,le),s(le,Ba),s(Q,Ga),s(D,ja),s(D,ae),s(ae,$),s($,Ha),s($,oe),s(oe,qa),s($,za),s($,te),s(te,Va),s($,Ka),s(D,Za),s(D,ne),s(ne,X),s(X,Ya),s(X,pe),s(pe,Ja),s(X,Qa),s(D,Xa),s(D,Fe),s(Fe,P),s(P,so),s(P,ce),s(ce,eo),s(P,lo),s(P,re),s(re,ao),s(P,oo),c(e,Dl,F),c(e,rs,F),s(rs,ie),s(ie,to),c(e,El,F),c(e,is,F),pl(ss,is,null),c(e,vl,F),c(e,ys,F),s(ys,es),s(es,no),s(es,ye),s(ye,po),s(es,Fo),c(e,hl,F),de.m(Hn,e,F),c(e,De,F),c(e,j,F),s(j,Ee),s(Ee,ds),s(ds,co),pl(ls,ds,null),s(j,ro),s(j,ve),s(ve,he),s(he,io),c(e,fl,F),fe.m(qn,e,F),c(e,ue,F),c(e,H,F),s(H,h),s(h,yo),s(h,me),s(me,Do),s(h,Eo),s(h,we),s(we,vo),s(h,ho),s(h,_e),s(_e,fo),s(h,uo),s(h,Ae),s(Ae,mo),s(h,wo),s(h,Ce),s(Ce,_o),s(h,Ao),s(H,Co),s(H,m),s(m,ko),s(m,ke),s(ke,bo),s(m,go),s(m,be),s(be,Oo),s(m,Io),s(m,ge),s(ge,Lo),s(m,No),s(m,Oe),s(Oe,Wo),s(m,So),c(e,ul,F),Ie.m(zn,e,F),c(e,Le,F),c(e,g,F),s(g,Ne),s(Ne,as),s(as,xo),s(as,We),s(We,To),s(as,$o),s(g,Po),s(g,Se),s(Se,os),s(os,Mo),s(os,xe),s(xe,Uo),s(os,Ro),s(g,Bo),s(g,Te),s(Te,$e),s($e,Go),c(e,ml,F),Pe.m(Vn,e,F),c(e,Me,F),c(e,Ds,F),pl(ts,Ds,null),c(e,wl,F),c(e,q,F),s(q,Ue),s(Ue,Re),s(Re,jo),s(q,Ho),s(q,Be),s(Be,ns),s(ns,qo),s(ns,Ge),s(Ge,zo),s(ns,Vo),c(e,_l,F),je.m(Kn,e,F),c(e,He,F),c(e,z,F),s(z,qe),s(qe,w),s(w,Ko),s(w,ze),s(ze,Zo),s(w,Yo),s(w,Ve),s(Ve,Jo),s(w,Qo),s(w,Ke),s(Ke,Xo),s(w,st),s(w,Ze),s(Ze,et),s(w,lt),s(z,at),s(z,Ye),s(Ye,Je),s(Je,Qe),s(Qe,ot),c(e,Al,F),Xe.m(Zn,e,F),c(e,sl,F),c(e,Es,F),s(Es,el),s(el,tt),c(e,Cl,F),ll.m(Yn,e,F),c(e,al,F),c(e,vs,F),pl(ps,vs,null),c(e,kl,F),c(e,hs,F),s(hs,ol),s(ol,nt),bl=!0},p:ep,i(e){bl||(Fl(ss.$$.fragment,e),Fl(ls.$$.fragment,e),Fl(ts.$$.fragment,e),Fl(ps.$$.fragment,e),bl=!0)},o(e){cl(ss.$$.fragment,e),cl(ls.$$.fragment,e),cl(ts.$$.fragment,e),cl(ps.$$.fragment,e),bl=!1},d(e){e&&l(y),e&&l(U),e&&l(d),e&&l(il),e&&_s.d(),e&&l(As),e&&l(B),e&&l(yl),e&&Is.d(),e&&l(Ls),e&&l(_),e&&l(dl),e&&qs.d(),e&&l(zs),e&&l(D),e&&l(Dl),e&&l(rs),e&&l(El),e&&l(is),rl(ss),e&&l(vl),e&&l(ys),e&&l(hl),e&&de.d(),e&&l(De),e&&l(j),rl(ls),e&&l(fl),e&&fe.d(),e&&l(ue),e&&l(H),e&&l(ul),e&&Ie.d(),e&&l(Le),e&&l(g),e&&l(ml),e&&Pe.d(),e&&l(Me),e&&l(Ds),rl(ts),e&&l(wl),e&&l(q),e&&l(_l),e&&je.d(),e&&l(He),e&&l(z),e&&l(Al),e&&Xe.d(),e&&l(sl),e&&l(Es),e&&l(Cl),e&&ll.d(),e&&l(al),e&&l(vs),rl(ps),e&&l(kl),e&&l(hs)}}}function op(Fs){let y,E;const x=[Fs[0],Rn];let U={$$slots:{default:[ap]},$$scope:{ctx:Fs}};for(let d=0;d<x.length;d+=1)U=Ft(U,x[d]);return y=new lp({props:U}),{c(){tl(y.$$.fragment)},l(d){nl(y.$$.fragment,d)},m(d,v){pl(y,d,v),E=!0},p(d,[v]){const cs=v&1?sp(x,[v&1&&Mn(d[0]),v&0&&Mn(Rn)]):{};v&2&&(cs.$$scope={dirty:v,ctx:d}),y.$set(cs)},i(d){E||(Fl(y.$$.fragment,d),E=!0)},o(d){cl(y.$$.fragment,d),E=!1},d(d){rl(y,d)}}}const Rn={title:"Welcome Web3",image:"/assets/info.png",created:"2022-12-19T00:00:00.000Z",updated:"2022-12-19T00:00:00.000Z",tags:["ctf","web3","nahamcon EU ctf 22"],flags:[],slug:"/Welcome Web3/+page.svelte.md",path:"/Welcome Web3",toc:!1};function tp(Fs,y,E){return Fs.$$set=x=>{E(0,y=Ft(Ft({},y),Un(x)))},y=Un(y),[y]}class cp extends Jn{constructor(y){super(),Qn(this,y,tp,op,Xn,{})}}export{cp as default,Rn as metadata};
